
niosLab2.elf:     file format elf32-littlenios2
niosLab2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002b50 memsz 0x00002b50 flags r-x
    LOAD off    0x00004148 vaddr 0x00010148 paddr 0x00002b70 align 2**12
         filesz 0x000002e8 memsz 0x00000408 flags rw-
    LOAD off    0x00005000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000148 memsz 0x00000148 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002940  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000148  00010000  00010000  00005000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e8  00010148  00002b70  00004148  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00010430  00002e58  00004430  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00002e58  00002e58  00005148  2**0
                  CONTENTS
  7 .onchip_memory2_1 00000000  00010550  00010550  00005148  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00005148  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000678  00000000  00000000  00005170  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000077cb  00000000  00000000  000057e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b77  00000000  00000000  0000cfb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003081  00000000  00000000  0000fb2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000b70  00000000  00000000  00012bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001d8e  00000000  00000000  0001371c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00002ae1  00000000  00000000  000154aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00017f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000003a0  00000000  00000000  00017fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00019e0e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00019e11  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00019e1d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00019e1e  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00019e1f  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00019e2a  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00019e35  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  00019e40  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000028  00000000  00000000  00019e48  2**0
                  CONTENTS, READONLY
 27 .jdi          00004e8b  00000000  00000000  00019e70  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0004192c  00000000  00000000  0001ecfb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00010000 l    d  .rodata	00000000 .rodata
00010148 l    d  .rwdata	00000000 .rwdata
00010430 l    d  .bss	00000000 .bss
00002e58 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00010550 l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosLab2_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00010158 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00001640 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000017d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00001914 l     F .text	00000034 alt_dev_reg
00010238 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00001d4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001e80 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00001eac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000206c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000021cc l     F .text	0000003c alt_get_errno
00002208 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001044c g     O .bss	00000004 alt_instruction_exception_handler
0000172c g     F .text	0000007c alt_main
00001300 g     F .text	00000080 _puts_r
00010450 g     O .bss	00000100 alt_irq
00002b70 g       *ABS*	00000000 __flash_rwdata_start
000024d4 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00010430 g     O .bss	00000004 edge_capture
00000020 g       *ABS*	00000000 __flash_exceptions_start
00010438 g     O .bss	00000004 errno
00010444 g     O .bss	00000004 alt_argv
0001840c g       *ABS*	00000000 _gp
000017a8 g     F .text	00000030 usleep
0001028c g     O .rwdata	00000180 alt_fd_list
000024f8 g     F .text	00000090 alt_find_dev
00000fe4 g     F .text	000000dc .hidden __floatsidf
00002150 g     F .text	0000007c alt_io_redirect
00002b70 g       *ABS*	00000000 __DTOR_END__
00001380 g     F .text	00000014 puts
00002754 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00001a74 g     F .text	000000ec altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000121c g     F .text	00000064 .hidden __udivsi3
00010428 g     O .rwdata	00000004 alt_max_fd
000014c0 g     F .text	00000180 alt_irq_register
0001040c g     O .rwdata	00000004 _global_impure_ptr
00010550 g       *ABS*	00000000 __bss_end
00010148 g     O .rwdata	00000010 vel
0001043c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00010264 g     O .rwdata	00000028 alt_dev_null
00001e60 g     F .text	00000020 alt_dcache_flush_all
00000f64 g     F .text	00000080 .hidden __fixdfsi
00010430 g       *ABS*	00000000 __ram_rwdata_end
00010420 g     O .rwdata	00000008 alt_dev_list
00001814 g     F .text	00000100 write
00010148 g       *ABS*	00000000 __ram_rodata_end
00001280 g     F .text	00000058 .hidden __umodsi3
00010550 g       *ABS*	00000000 end
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00000358 g     F .text	00000064 init_pio
00002b70 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
000010c0 g     F .text	00000064 .hidden __clzsi2
00001b60 g     F .text	00000094 altera_avalon_jtag_uart_write
000029ac g     F .text	00000190 __call_exitprocs
00000230 g     F .text	0000003c _start
000002b0 g     F .text	00000044 putSteps
00001980 g     F .text	00000034 alt_sys_init
00002854 g     F .text	00000158 __register_exitproc
000012d8 g     F .text	00000028 .hidden __mulsi3
00010148 g       *ABS*	00000000 __ram_rwdata_start
00010000 g       *ABS*	00000000 __ram_rodata_start
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
000019b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00002690 g     F .text	000000c4 alt_get_fd
00001bf4 g     F .text	00000158 alt_busy_sleep
00002824 g     F .text	00000030 memcmp
00010550 g       *ABS*	00000000 __alt_stack_base
00000594 g     F .text	000009d0 .hidden __divdf3
00002588 g     F .text	00000108 alt_find_file
00001ee8 g     F .text	000000a4 alt_dev_llist_insert
000013b0 g     F .text	000000b8 __sfvwrite_small_dev
00010430 g       *ABS*	00000000 __bss_start
000003bc g     F .text	000001d8 main
00010448 g     O .bss	00000004 alt_envp
00001a14 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00010434 g     O .bss	00000004 pins
0001042c g     O .rwdata	00000004 alt_errno
00001124 g     F .text	00000084 .hidden __divsi3
00002b70 g       *ABS*	00000000 __CTOR_END__
00010000 g       *ABS*	00000000 __flash_rodata_start
00002b70 g       *ABS*	00000000 __DTOR_LIST__
0000026c g     F .text	00000044 delay
00001948 g     F .text	00000038 alt_irq_init
00002450 g     F .text	00000084 alt_release_fd
0001000e g     O .rodata	00000100 .hidden __clz_tab
000027f0 g     F .text	00000014 atexit
00001468 g     F .text	00000058 _write_r
00010410 g     O .rwdata	00000004 _impure_ptr
00010440 g     O .bss	00000004 alt_argc
00001fec g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00010418 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00010430 g       *ABS*	00000000 _edata
00010550 g       *ABS*	00000000 _end
00000230 g       *ABS*	00000000 __ram_exceptions_end
00002804 g     F .text	00000020 exit
000011a8 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00002b3c g     F .text	00000034 _exit
00001394 g     F .text	0000001c strlen
000022f4 g     F .text	0000015c open
0000204c g     F .text	00000020 alt_icache_flush_all
00010414 g     O .rwdata	00000004 alt_priority_mask
00001f8c g     F .text	00000060 _do_ctors
000002f4 g     F .text	00000064 handle_button_interrupts
00001d88 g     F .text	000000d8 close
000016a8 g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10811404 	addi	r2,r2,1104
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10811404 	addi	r2,r2,1104
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a01017 	ldw	r2,-32704(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a01017 	ldw	r2,-32704(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6a10314 	ori	gp,gp,33804
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	10810c14 	ori	r2,r2,1072

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18c15414 	ori	r3,r3,1360

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00016a80 	call	16a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000172c0 	call	172c <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <alt_after_alt_main>

0000026c <delay>:
#include "altera_avalon_pio_regs.h"

#define ENPin 0b1
#define DIRPin 0b10

int delay(int n){
     26c:	defffd04 	addi	sp,sp,-12
     270:	df000215 	stw	fp,8(sp)
     274:	df000204 	addi	fp,sp,8
     278:	e13fff15 	stw	r4,-4(fp)
      unsigned int delay = 0 ;
     27c:	e03ffe15 	stw	zero,-8(fp)
      while(delay < n){
     280:	00000306 	br	290 <delay+0x24>
          delay++;
     284:	e0bffe17 	ldw	r2,-8(fp)
     288:	10800044 	addi	r2,r2,1
     28c:	e0bffe15 	stw	r2,-8(fp)
#define ENPin 0b1
#define DIRPin 0b10

int delay(int n){
      unsigned int delay = 0 ;
      while(delay < n){
     290:	e0bfff17 	ldw	r2,-4(fp)
     294:	e0fffe17 	ldw	r3,-8(fp)
     298:	18bffa36 	bltu	r3,r2,284 <delay+0x18>
          delay++;
      }
      return 0;
     29c:	0005883a 	mov	r2,zero
}
     2a0:	e037883a 	mov	sp,fp
     2a4:	df000017 	ldw	fp,0(sp)
     2a8:	dec00104 	addi	sp,sp,4
     2ac:	f800283a 	ret

000002b0 <putSteps>:

void putSteps(int steps){
     2b0:	defffd04 	addi	sp,sp,-12
     2b4:	df000215 	stw	fp,8(sp)
     2b8:	df000204 	addi	fp,sp,8
     2bc:	e13fff15 	stw	r4,-4(fp)

	for(unsigned int i = 0; i < steps; i++){
     2c0:	e03ffe15 	stw	zero,-8(fp)
     2c4:	00000306 	br	2d4 <putSteps+0x24>
     2c8:	e0bffe17 	ldw	r2,-8(fp)
     2cc:	10800044 	addi	r2,r2,1
     2d0:	e0bffe15 	stw	r2,-8(fp)
     2d4:	e0bfff17 	ldw	r2,-4(fp)
     2d8:	e0fffe17 	ldw	r3,-8(fp)
     2dc:	18bffa36 	bltu	r3,r2,2c8 <putSteps+0x18>

	}
}
     2e0:	0001883a 	nop
     2e4:	e037883a 	mov	sp,fp
     2e8:	df000017 	ldw	fp,0(sp)
     2ec:	dec00104 	addi	sp,sp,4
     2f0:	f800283a 	ret

000002f4 <handle_button_interrupts>:

volatile int edge_capture;
volatile unsigned int pins;

void handle_button_interrupts(void* context, alt_u32 id)
 {
     2f4:	defffc04 	addi	sp,sp,-16
     2f8:	df000315 	stw	fp,12(sp)
     2fc:	df000304 	addi	fp,sp,12
     300:	e13ffe15 	stw	r4,-8(fp)
     304:	e17fff15 	stw	r5,-4(fp)
    /* Cast context to edge_capture's type. It is important that this be
      * declared volatile to avoid unwanted compiler optimization.
      */
     volatile int* edge_capture_ptr = (volatile int*) context;
     308:	e0bffe17 	ldw	r2,-8(fp)
     30c:	e0bffd15 	stw	r2,-12(fp)
     /* Store the value in the Button's edge capture register in *context. */
     *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE);
     310:	008000b4 	movhi	r2,2
     314:	10840304 	addi	r2,r2,4108
     318:	10c00037 	ldwio	r3,0(r2)
     31c:	e0bffd17 	ldw	r2,-12(fp)
     320:	10c00015 	stw	r3,0(r2)
     pins = IORD_32DIRECT(PIO_1_BASE, 0);
     324:	008000b4 	movhi	r2,2
     328:	10840004 	addi	r2,r2,4096
     32c:	10800037 	ldwio	r2,0(r2)
     330:	d0a00a15 	stw	r2,-32728(gp)

     /* Reset the Button's edge capture register. */
     IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0);
     334:	0007883a 	mov	r3,zero
     338:	008000b4 	movhi	r2,2
     33c:	10840304 	addi	r2,r2,4108
     340:	10c00035 	stwio	r3,0(r2)
 }
     344:	0001883a 	nop
     348:	e037883a 	mov	sp,fp
     34c:	df000017 	ldw	fp,0(sp)
     350:	dec00104 	addi	sp,sp,4
     354:	f800283a 	ret

00000358 <init_pio>:

void init_pio()
 {
     358:	defffd04 	addi	sp,sp,-12
     35c:	dfc00215 	stw	ra,8(sp)
     360:	df000115 	stw	fp,4(sp)
     364:	df000104 	addi	fp,sp,4
     /* Recast the edge_capture pointer to match the alt_irq_register() function
      * prototype. */
     void* edge_capture_ptr = (void*) &edge_capture;
     368:	d0a00904 	addi	r2,gp,-32732
     36c:	e0bfff15 	stw	r2,-4(fp)
     /* Enable first four interrupts. */
     IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, 0xf);
     370:	00c003c4 	movi	r3,15
     374:	008000b4 	movhi	r2,2
     378:	10840204 	addi	r2,r2,4104
     37c:	10c00035 	stwio	r3,0(r2)
     /* Reset the edge capture register. */
     IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0x0);
     380:	0007883a 	mov	r3,zero
     384:	008000b4 	movhi	r2,2
     388:	10840304 	addi	r2,r2,4108
     38c:	10c00035 	stwio	r3,0(r2)
     /* Register the interrupt handler. */
     alt_irq_register( PIO_1_IRQ, edge_capture_ptr,
     390:	01800034 	movhi	r6,0
     394:	3180bd04 	addi	r6,r6,756
     398:	e17fff17 	ldw	r5,-4(fp)
     39c:	01000044 	movi	r4,1
     3a0:	00014c00 	call	14c0 <alt_irq_register>
                       handle_button_interrupts );
 }
     3a4:	0001883a 	nop
     3a8:	e037883a 	mov	sp,fp
     3ac:	dfc00117 	ldw	ra,4(sp)
     3b0:	df000017 	ldw	fp,0(sp)
     3b4:	dec00204 	addi	sp,sp,8
     3b8:	f800283a 	ret

000003bc <main>:

unsigned int vel[] = {16000, 8000, 4000, 2000};

int main(void){
     3bc:	defff804 	addi	sp,sp,-32
     3c0:	dfc00715 	stw	ra,28(sp)
     3c4:	df000615 	stw	fp,24(sp)
     3c8:	df000604 	addi	fp,sp,24
  init_pio();
     3cc:	00003580 	call	358 <init_pio>
  int led = 0;
     3d0:	e03ffa15 	stw	zero,-24(fp)
  printf("Embarcados++ \n");
     3d4:	01000074 	movhi	r4,1
     3d8:	21000004 	addi	r4,r4,0
     3dc:	00013800 	call	1380 <puts>
  int count = 0;
     3e0:	e03ffb15 	stw	zero,-20(fp)
  int diff = 0;
     3e4:	e03ffc15 	stw	zero,-16(fp)
  int prevCommd = 0;
     3e8:	e03ffd15 	stw	zero,-12(fp)
  int actDelay = 16000;
     3ec:	008fa004 	movi	r2,16000
     3f0:	e0bffe15 	stw	r2,-8(fp)
  while(1){
	  int commd = (pins >> 2) & 0b11;
     3f4:	d0a00a17 	ldw	r2,-32728(gp)
     3f8:	1004d0ba 	srli	r2,r2,2
     3fc:	108000cc 	andi	r2,r2,3
     400:	e0bfff15 	stw	r2,-4(fp)
	  if(pins & ENPin){
     404:	d0a00a17 	ldw	r2,-32728(gp)
     408:	1080004c 	andi	r2,r2,1
     40c:	103ff926 	beq	r2,zero,3f4 <main+0x38>
		  IOWR_32DIRECT(PIO_0_BASE, 0, 0x01 << led);
     410:	00c00044 	movi	r3,1
     414:	e0bffa17 	ldw	r2,-24(fp)
     418:	1886983a 	sll	r3,r3,r2
     41c:	008000b4 	movhi	r2,2
     420:	10840404 	addi	r2,r2,4112
     424:	10c00035 	stwio	r3,0(r2)
		  led += (pins & DIRPin)? 1 : -1;
     428:	d0a00a17 	ldw	r2,-32728(gp)
     42c:	1080008c 	andi	r2,r2,2
     430:	10000226 	beq	r2,zero,43c <main+0x80>
     434:	00800044 	movi	r2,1
     438:	00000106 	br	440 <main+0x84>
     43c:	00bfffc4 	movi	r2,-1
     440:	e0fffa17 	ldw	r3,-24(fp)
     444:	1885883a 	add	r2,r3,r2
     448:	e0bffa15 	stw	r2,-24(fp)
		  if (led > 3){
     44c:	e0bffa17 	ldw	r2,-24(fp)
     450:	10800110 	cmplti	r2,r2,4
     454:	1000021e 	bne	r2,zero,460 <main+0xa4>
			  led = 0;
     458:	e03ffa15 	stw	zero,-24(fp)
     45c:	00000406 	br	470 <main+0xb4>
		  }else if(led < 0){
     460:	e0bffa17 	ldw	r2,-24(fp)
     464:	1000020e 	bge	r2,zero,470 <main+0xb4>
			  led = 3;
     468:	008000c4 	movi	r2,3
     46c:	e0bffa15 	stw	r2,-24(fp)
		  }
		  if(prevCommd != commd){
     470:	e0fffd17 	ldw	r3,-12(fp)
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	18801d26 	beq	r3,r2,4f0 <main+0x134>
			  diff = vel[prevCommd] - vel[commd];
     47c:	00800074 	movhi	r2,1
     480:	10805204 	addi	r2,r2,328
     484:	e0fffd17 	ldw	r3,-12(fp)
     488:	18c7883a 	add	r3,r3,r3
     48c:	18c7883a 	add	r3,r3,r3
     490:	10c5883a 	add	r2,r2,r3
     494:	11000017 	ldw	r4,0(r2)
     498:	00800074 	movhi	r2,1
     49c:	10805204 	addi	r2,r2,328
     4a0:	e0ffff17 	ldw	r3,-4(fp)
     4a4:	18c7883a 	add	r3,r3,r3
     4a8:	18c7883a 	add	r3,r3,r3
     4ac:	10c5883a 	add	r2,r2,r3
     4b0:	10800017 	ldw	r2,0(r2)
     4b4:	2085c83a 	sub	r2,r4,r2
     4b8:	e0bffc15 	stw	r2,-16(fp)
			  actDelay = vel[commd] + diff;
     4bc:	00800074 	movhi	r2,1
     4c0:	10805204 	addi	r2,r2,328
     4c4:	e0ffff17 	ldw	r3,-4(fp)
     4c8:	18c7883a 	add	r3,r3,r3
     4cc:	18c7883a 	add	r3,r3,r3
     4d0:	10c5883a 	add	r2,r2,r3
     4d4:	10c00017 	ldw	r3,0(r2)
     4d8:	e0bffc17 	ldw	r2,-16(fp)
     4dc:	1885883a 	add	r2,r3,r2
     4e0:	e0bffe15 	stw	r2,-8(fp)
			  prevCommd = commd;
     4e4:	e0bfff17 	ldw	r2,-4(fp)
     4e8:	e0bffd15 	stw	r2,-12(fp)
     4ec:	00002606 	br	588 <main+0x1cc>
		  }else if(diff != 0){
     4f0:	e0bffc17 	ldw	r2,-16(fp)
     4f4:	10002426 	beq	r2,zero,588 <main+0x1cc>
			  if(count > 20){
     4f8:	e0bffb17 	ldw	r2,-20(fp)
     4fc:	10800550 	cmplti	r2,r2,21
     500:	10001e1e 	bne	r2,zero,57c <main+0x1c0>
				  count = 0;
     504:	e03ffb15 	stw	zero,-20(fp)
				  diff /= 1.3;
     508:	e13ffc17 	ldw	r4,-16(fp)
     50c:	0000fe40 	call	fe4 <__floatsidf>
     510:	1011883a 	mov	r8,r2
     514:	1813883a 	mov	r9,r3
     518:	01b33374 	movhi	r6,52429
     51c:	31b33344 	addi	r6,r6,-13107
     520:	01cffd74 	movhi	r7,16373
     524:	39f33304 	addi	r7,r7,-13108
     528:	4009883a 	mov	r4,r8
     52c:	480b883a 	mov	r5,r9
     530:	00005940 	call	594 <__divdf3>
     534:	1009883a 	mov	r4,r2
     538:	180b883a 	mov	r5,r3
     53c:	2005883a 	mov	r2,r4
     540:	2807883a 	mov	r3,r5
     544:	1009883a 	mov	r4,r2
     548:	180b883a 	mov	r5,r3
     54c:	0000f640 	call	f64 <__fixdfsi>
     550:	e0bffc15 	stw	r2,-16(fp)
				  actDelay = vel[commd] + diff;
     554:	00800074 	movhi	r2,1
     558:	10805204 	addi	r2,r2,328
     55c:	e0ffff17 	ldw	r3,-4(fp)
     560:	18c7883a 	add	r3,r3,r3
     564:	18c7883a 	add	r3,r3,r3
     568:	10c5883a 	add	r2,r2,r3
     56c:	10c00017 	ldw	r3,0(r2)
     570:	e0bffc17 	ldw	r2,-16(fp)
     574:	1885883a 	add	r2,r3,r2
     578:	e0bffe15 	stw	r2,-8(fp)
			  }
			  count++;
     57c:	e0bffb17 	ldw	r2,-20(fp)
     580:	10800044 	addi	r2,r2,1
     584:	e0bffb15 	stw	r2,-20(fp)
		  }
		  usleep(actDelay);
     588:	e13ffe17 	ldw	r4,-8(fp)
     58c:	00017a80 	call	17a8 <usleep>
	  }
  };
     590:	003f9806 	br	3f4 <main+0x38>

00000594 <__divdf3>:
     594:	defff004 	addi	sp,sp,-64
     598:	dc800815 	stw	r18,32(sp)
     59c:	2824d53a 	srli	r18,r5,20
     5a0:	dd800c15 	stw	r22,48(sp)
     5a4:	282cd7fa 	srli	r22,r5,31
     5a8:	dc000615 	stw	r16,24(sp)
     5ac:	04000434 	movhi	r16,16
     5b0:	843fffc4 	addi	r16,r16,-1
     5b4:	dfc00f15 	stw	ra,60(sp)
     5b8:	df000e15 	stw	fp,56(sp)
     5bc:	ddc00d15 	stw	r23,52(sp)
     5c0:	dd400b15 	stw	r21,44(sp)
     5c4:	dd000a15 	stw	r20,40(sp)
     5c8:	dcc00915 	stw	r19,36(sp)
     5cc:	dc400715 	stw	r17,28(sp)
     5d0:	9481ffcc 	andi	r18,r18,2047
     5d4:	2c20703a 	and	r16,r5,r16
     5d8:	b2003fcc 	andi	r8,r22,255
     5dc:	90006126 	beq	r18,zero,764 <__divdf3+0x1d0>
     5e0:	0081ffc4 	movi	r2,2047
     5e4:	202b883a 	mov	r21,r4
     5e8:	90803726 	beq	r18,r2,6c8 <__divdf3+0x134>
     5ec:	80800434 	orhi	r2,r16,16
     5f0:	100490fa 	slli	r2,r2,3
     5f4:	2020d77a 	srli	r16,r4,29
     5f8:	202a90fa 	slli	r21,r4,3
     5fc:	94bf0044 	addi	r18,r18,-1023
     600:	80a0b03a 	or	r16,r16,r2
     604:	0013883a 	mov	r9,zero
     608:	000b883a 	mov	r5,zero
     60c:	3806d53a 	srli	r3,r7,20
     610:	382ed7fa 	srli	r23,r7,31
     614:	04400434 	movhi	r17,16
     618:	8c7fffc4 	addi	r17,r17,-1
     61c:	18c1ffcc 	andi	r3,r3,2047
     620:	3029883a 	mov	r20,r6
     624:	3c62703a 	and	r17,r7,r17
     628:	bf003fcc 	andi	fp,r23,255
     62c:	18006e26 	beq	r3,zero,7e8 <__divdf3+0x254>
     630:	0081ffc4 	movi	r2,2047
     634:	18806626 	beq	r3,r2,7d0 <__divdf3+0x23c>
     638:	88800434 	orhi	r2,r17,16
     63c:	100490fa 	slli	r2,r2,3
     640:	3022d77a 	srli	r17,r6,29
     644:	302890fa 	slli	r20,r6,3
     648:	18ff0044 	addi	r3,r3,-1023
     64c:	88a2b03a 	or	r17,r17,r2
     650:	000f883a 	mov	r7,zero
     654:	b5e6f03a 	xor	r19,r22,r23
     658:	3a4cb03a 	or	r6,r7,r9
     65c:	008003c4 	movi	r2,15
     660:	9809883a 	mov	r4,r19
     664:	90c7c83a 	sub	r3,r18,r3
     668:	9cc03fcc 	andi	r19,r19,255
     66c:	11809636 	bltu	r2,r6,8c8 <__divdf3+0x334>
     670:	300c90ba 	slli	r6,r6,2
     674:	00800034 	movhi	r2,0
     678:	1081a204 	addi	r2,r2,1672
     67c:	308d883a 	add	r6,r6,r2
     680:	30800017 	ldw	r2,0(r6)
     684:	1000683a 	jmp	r2
     688:	000008c8 	cmpgei	zero,zero,35
     68c:	00000700 	call	70 <__flash_exceptions_start+0x50>
     690:	000008b8 	rdprs	zero,zero,34
     694:	000006f4 	movhi	zero,27
     698:	000008b8 	rdprs	zero,zero,34
     69c:	0000088c 	andi	zero,zero,34
     6a0:	000008b8 	rdprs	zero,zero,34
     6a4:	000006f4 	movhi	zero,27
     6a8:	00000700 	call	70 <__flash_exceptions_start+0x50>
     6ac:	00000700 	call	70 <__flash_exceptions_start+0x50>
     6b0:	0000088c 	andi	zero,zero,34
     6b4:	000006f4 	movhi	zero,27
     6b8:	000006e4 	muli	zero,zero,27
     6bc:	000006e4 	muli	zero,zero,27
     6c0:	000006e4 	muli	zero,zero,27
     6c4:	00000c50 	cmplti	zero,zero,49
     6c8:	2404b03a 	or	r2,r4,r16
     6cc:	10006c1e 	bne	r2,zero,880 <__divdf3+0x2ec>
     6d0:	02400204 	movi	r9,8
     6d4:	0021883a 	mov	r16,zero
     6d8:	002b883a 	mov	r21,zero
     6dc:	01400084 	movi	r5,2
     6e0:	003fca06 	br	60c <__divdf3+0x78>
     6e4:	8023883a 	mov	r17,r16
     6e8:	a829883a 	mov	r20,r21
     6ec:	4039883a 	mov	fp,r8
     6f0:	280f883a 	mov	r7,r5
     6f4:	00800084 	movi	r2,2
     6f8:	3881601e 	bne	r7,r2,c7c <__divdf3+0x6e8>
     6fc:	e027883a 	mov	r19,fp
     700:	9900004c 	andi	r4,r19,1
     704:	0081ffc4 	movi	r2,2047
     708:	0021883a 	mov	r16,zero
     70c:	002b883a 	mov	r21,zero
     710:	1004953a 	slli	r2,r2,20
     714:	20c03fcc 	andi	r3,r4,255
     718:	01400434 	movhi	r5,16
     71c:	297fffc4 	addi	r5,r5,-1
     720:	180697fa 	slli	r3,r3,31
     724:	8160703a 	and	r16,r16,r5
     728:	80a0b03a 	or	r16,r16,r2
     72c:	80c6b03a 	or	r3,r16,r3
     730:	a805883a 	mov	r2,r21
     734:	dfc00f17 	ldw	ra,60(sp)
     738:	df000e17 	ldw	fp,56(sp)
     73c:	ddc00d17 	ldw	r23,52(sp)
     740:	dd800c17 	ldw	r22,48(sp)
     744:	dd400b17 	ldw	r21,44(sp)
     748:	dd000a17 	ldw	r20,40(sp)
     74c:	dcc00917 	ldw	r19,36(sp)
     750:	dc800817 	ldw	r18,32(sp)
     754:	dc400717 	ldw	r17,28(sp)
     758:	dc000617 	ldw	r16,24(sp)
     75c:	dec01004 	addi	sp,sp,64
     760:	f800283a 	ret
     764:	2404b03a 	or	r2,r4,r16
     768:	2023883a 	mov	r17,r4
     76c:	10003f26 	beq	r2,zero,86c <__divdf3+0x2d8>
     770:	80015e26 	beq	r16,zero,cec <__divdf3+0x758>
     774:	8009883a 	mov	r4,r16
     778:	d9800215 	stw	r6,8(sp)
     77c:	d9c00515 	stw	r7,20(sp)
     780:	da000415 	stw	r8,16(sp)
     784:	00010c00 	call	10c0 <__clzsi2>
     788:	d9800217 	ldw	r6,8(sp)
     78c:	d9c00517 	ldw	r7,20(sp)
     790:	da000417 	ldw	r8,16(sp)
     794:	113ffd44 	addi	r4,r2,-11
     798:	00c00704 	movi	r3,28
     79c:	19014f16 	blt	r3,r4,cdc <__divdf3+0x748>
     7a0:	00c00744 	movi	r3,29
     7a4:	157ffe04 	addi	r21,r2,-8
     7a8:	1907c83a 	sub	r3,r3,r4
     7ac:	8560983a 	sll	r16,r16,r21
     7b0:	88c6d83a 	srl	r3,r17,r3
     7b4:	8d6a983a 	sll	r21,r17,r21
     7b8:	1c20b03a 	or	r16,r3,r16
     7bc:	1080fcc4 	addi	r2,r2,1011
     7c0:	00a5c83a 	sub	r18,zero,r2
     7c4:	0013883a 	mov	r9,zero
     7c8:	000b883a 	mov	r5,zero
     7cc:	003f8f06 	br	60c <__divdf3+0x78>
     7d0:	3444b03a 	or	r2,r6,r17
     7d4:	1000231e 	bne	r2,zero,864 <__divdf3+0x2d0>
     7d8:	0023883a 	mov	r17,zero
     7dc:	0029883a 	mov	r20,zero
     7e0:	01c00084 	movi	r7,2
     7e4:	003f9b06 	br	654 <__divdf3+0xc0>
     7e8:	3444b03a 	or	r2,r6,r17
     7ec:	10001926 	beq	r2,zero,854 <__divdf3+0x2c0>
     7f0:	88014b26 	beq	r17,zero,d20 <__divdf3+0x78c>
     7f4:	8809883a 	mov	r4,r17
     7f8:	d9400115 	stw	r5,4(sp)
     7fc:	d9800215 	stw	r6,8(sp)
     800:	da000415 	stw	r8,16(sp)
     804:	da400315 	stw	r9,12(sp)
     808:	00010c00 	call	10c0 <__clzsi2>
     80c:	d9400117 	ldw	r5,4(sp)
     810:	d9800217 	ldw	r6,8(sp)
     814:	da000417 	ldw	r8,16(sp)
     818:	da400317 	ldw	r9,12(sp)
     81c:	113ffd44 	addi	r4,r2,-11
     820:	00c00704 	movi	r3,28
     824:	19013a16 	blt	r3,r4,d10 <__divdf3+0x77c>
     828:	00c00744 	movi	r3,29
     82c:	153ffe04 	addi	r20,r2,-8
     830:	1907c83a 	sub	r3,r3,r4
     834:	8d22983a 	sll	r17,r17,r20
     838:	30c6d83a 	srl	r3,r6,r3
     83c:	3528983a 	sll	r20,r6,r20
     840:	1c62b03a 	or	r17,r3,r17
     844:	1080fcc4 	addi	r2,r2,1011
     848:	0087c83a 	sub	r3,zero,r2
     84c:	000f883a 	mov	r7,zero
     850:	003f8006 	br	654 <__divdf3+0xc0>
     854:	0023883a 	mov	r17,zero
     858:	0029883a 	mov	r20,zero
     85c:	01c00044 	movi	r7,1
     860:	003f7c06 	br	654 <__divdf3+0xc0>
     864:	01c000c4 	movi	r7,3
     868:	003f7a06 	br	654 <__divdf3+0xc0>
     86c:	02400104 	movi	r9,4
     870:	0021883a 	mov	r16,zero
     874:	002b883a 	mov	r21,zero
     878:	01400044 	movi	r5,1
     87c:	003f6306 	br	60c <__divdf3+0x78>
     880:	02400304 	movi	r9,12
     884:	014000c4 	movi	r5,3
     888:	003f6006 	br	60c <__divdf3+0x78>
     88c:	04000434 	movhi	r16,16
     890:	0009883a 	mov	r4,zero
     894:	843fffc4 	addi	r16,r16,-1
     898:	057fffc4 	movi	r21,-1
     89c:	0081ffc4 	movi	r2,2047
     8a0:	003f9b06 	br	710 <__divdf3+0x17c>
     8a4:	00c00044 	movi	r3,1
     8a8:	1887c83a 	sub	r3,r3,r2
     8ac:	01000e04 	movi	r4,56
     8b0:	20c1530e 	bge	r4,r3,e00 <__divdf3+0x86c>
     8b4:	9900004c 	andi	r4,r19,1
     8b8:	0005883a 	mov	r2,zero
     8bc:	0021883a 	mov	r16,zero
     8c0:	002b883a 	mov	r21,zero
     8c4:	003f9206 	br	710 <__divdf3+0x17c>
     8c8:	8c012e36 	bltu	r17,r16,d84 <__divdf3+0x7f0>
     8cc:	84412c26 	beq	r16,r17,d80 <__divdf3+0x7ec>
     8d0:	a82f883a 	mov	r23,r21
     8d4:	18ffffc4 	addi	r3,r3,-1
     8d8:	002b883a 	mov	r21,zero
     8dc:	a004d63a 	srli	r2,r20,24
     8e0:	8822923a 	slli	r17,r17,8
     8e4:	a028923a 	slli	r20,r20,8
     8e8:	8009883a 	mov	r4,r16
     8ec:	88acb03a 	or	r22,r17,r2
     8f0:	dd000015 	stw	r20,0(sp)
     8f4:	b028d43a 	srli	r20,r22,16
     8f8:	d8c00215 	stw	r3,8(sp)
     8fc:	b4bfffcc 	andi	r18,r22,65535
     900:	a00b883a 	mov	r5,r20
     904:	000121c0 	call	121c <__udivsi3>
     908:	100b883a 	mov	r5,r2
     90c:	9009883a 	mov	r4,r18
     910:	1023883a 	mov	r17,r2
     914:	00012d80 	call	12d8 <__mulsi3>
     918:	8009883a 	mov	r4,r16
     91c:	a00b883a 	mov	r5,r20
     920:	1039883a 	mov	fp,r2
     924:	00012800 	call	1280 <__umodsi3>
     928:	1004943a 	slli	r2,r2,16
     92c:	b808d43a 	srli	r4,r23,16
     930:	d8c00217 	ldw	r3,8(sp)
     934:	2084b03a 	or	r2,r4,r2
     938:	1700062e 	bgeu	r2,fp,954 <__divdf3+0x3c0>
     93c:	1585883a 	add	r2,r2,r22
     940:	893fffc4 	addi	r4,r17,-1
     944:	15811d36 	bltu	r2,r22,dbc <__divdf3+0x828>
     948:	17011c2e 	bgeu	r2,fp,dbc <__divdf3+0x828>
     94c:	8c7fff84 	addi	r17,r17,-2
     950:	1585883a 	add	r2,r2,r22
     954:	1739c83a 	sub	fp,r2,fp
     958:	a00b883a 	mov	r5,r20
     95c:	e009883a 	mov	r4,fp
     960:	d8c00215 	stw	r3,8(sp)
     964:	000121c0 	call	121c <__udivsi3>
     968:	100b883a 	mov	r5,r2
     96c:	9009883a 	mov	r4,r18
     970:	1021883a 	mov	r16,r2
     974:	00012d80 	call	12d8 <__mulsi3>
     978:	a00b883a 	mov	r5,r20
     97c:	e009883a 	mov	r4,fp
     980:	d8800415 	stw	r2,16(sp)
     984:	00012800 	call	1280 <__umodsi3>
     988:	1004943a 	slli	r2,r2,16
     98c:	da000417 	ldw	r8,16(sp)
     990:	bdffffcc 	andi	r23,r23,65535
     994:	b884b03a 	or	r2,r23,r2
     998:	d8c00217 	ldw	r3,8(sp)
     99c:	1200062e 	bgeu	r2,r8,9b8 <__divdf3+0x424>
     9a0:	1585883a 	add	r2,r2,r22
     9a4:	813fffc4 	addi	r4,r16,-1
     9a8:	15810236 	bltu	r2,r22,db4 <__divdf3+0x820>
     9ac:	1201012e 	bgeu	r2,r8,db4 <__divdf3+0x820>
     9b0:	843fff84 	addi	r16,r16,-2
     9b4:	1585883a 	add	r2,r2,r22
     9b8:	8822943a 	slli	r17,r17,16
     9bc:	d9800017 	ldw	r6,0(sp)
     9c0:	1211c83a 	sub	r8,r2,r8
     9c4:	8c22b03a 	or	r17,r17,r16
     9c8:	373fffcc 	andi	fp,r6,65535
     9cc:	8abfffcc 	andi	r10,r17,65535
     9d0:	8820d43a 	srli	r16,r17,16
     9d4:	5009883a 	mov	r4,r10
     9d8:	e00b883a 	mov	r5,fp
     9dc:	302ed43a 	srli	r23,r6,16
     9e0:	d8c00215 	stw	r3,8(sp)
     9e4:	da000415 	stw	r8,16(sp)
     9e8:	da800115 	stw	r10,4(sp)
     9ec:	00012d80 	call	12d8 <__mulsi3>
     9f0:	800b883a 	mov	r5,r16
     9f4:	e009883a 	mov	r4,fp
     9f8:	d8800515 	stw	r2,20(sp)
     9fc:	00012d80 	call	12d8 <__mulsi3>
     a00:	8009883a 	mov	r4,r16
     a04:	b80b883a 	mov	r5,r23
     a08:	d8800315 	stw	r2,12(sp)
     a0c:	00012d80 	call	12d8 <__mulsi3>
     a10:	da800117 	ldw	r10,4(sp)
     a14:	b80b883a 	mov	r5,r23
     a18:	1021883a 	mov	r16,r2
     a1c:	5009883a 	mov	r4,r10
     a20:	00012d80 	call	12d8 <__mulsi3>
     a24:	d9c00517 	ldw	r7,20(sp)
     a28:	da400317 	ldw	r9,12(sp)
     a2c:	d8c00217 	ldw	r3,8(sp)
     a30:	3808d43a 	srli	r4,r7,16
     a34:	1245883a 	add	r2,r2,r9
     a38:	da000417 	ldw	r8,16(sp)
     a3c:	2085883a 	add	r2,r4,r2
     a40:	1240022e 	bgeu	r2,r9,a4c <__divdf3+0x4b8>
     a44:	01000074 	movhi	r4,1
     a48:	8121883a 	add	r16,r16,r4
     a4c:	1008d43a 	srli	r4,r2,16
     a50:	1004943a 	slli	r2,r2,16
     a54:	39ffffcc 	andi	r7,r7,65535
     a58:	2409883a 	add	r4,r4,r16
     a5c:	11c5883a 	add	r2,r2,r7
     a60:	4100bb36 	bltu	r8,r4,d50 <__divdf3+0x7bc>
     a64:	4100d726 	beq	r8,r4,dc4 <__divdf3+0x830>
     a68:	4109c83a 	sub	r4,r8,r4
     a6c:	a8a1c83a 	sub	r16,r21,r2
     a70:	ac2b803a 	cmpltu	r21,r21,r16
     a74:	256bc83a 	sub	r21,r4,r21
     a78:	b540d926 	beq	r22,r21,de0 <__divdf3+0x84c>
     a7c:	a00b883a 	mov	r5,r20
     a80:	a809883a 	mov	r4,r21
     a84:	d8c00215 	stw	r3,8(sp)
     a88:	000121c0 	call	121c <__udivsi3>
     a8c:	100b883a 	mov	r5,r2
     a90:	9009883a 	mov	r4,r18
     a94:	d8800515 	stw	r2,20(sp)
     a98:	00012d80 	call	12d8 <__mulsi3>
     a9c:	a809883a 	mov	r4,r21
     aa0:	a00b883a 	mov	r5,r20
     aa4:	d8800415 	stw	r2,16(sp)
     aa8:	00012800 	call	1280 <__umodsi3>
     aac:	1004943a 	slli	r2,r2,16
     ab0:	8008d43a 	srli	r4,r16,16
     ab4:	da000417 	ldw	r8,16(sp)
     ab8:	d8c00217 	ldw	r3,8(sp)
     abc:	2084b03a 	or	r2,r4,r2
     ac0:	d9c00517 	ldw	r7,20(sp)
     ac4:	1200062e 	bgeu	r2,r8,ae0 <__divdf3+0x54c>
     ac8:	1585883a 	add	r2,r2,r22
     acc:	393fffc4 	addi	r4,r7,-1
     ad0:	1580c536 	bltu	r2,r22,de8 <__divdf3+0x854>
     ad4:	1200c42e 	bgeu	r2,r8,de8 <__divdf3+0x854>
     ad8:	39ffff84 	addi	r7,r7,-2
     adc:	1585883a 	add	r2,r2,r22
     ae0:	122bc83a 	sub	r21,r2,r8
     ae4:	a00b883a 	mov	r5,r20
     ae8:	a809883a 	mov	r4,r21
     aec:	d8c00215 	stw	r3,8(sp)
     af0:	d9c00515 	stw	r7,20(sp)
     af4:	000121c0 	call	121c <__udivsi3>
     af8:	9009883a 	mov	r4,r18
     afc:	100b883a 	mov	r5,r2
     b00:	d8800415 	stw	r2,16(sp)
     b04:	00012d80 	call	12d8 <__mulsi3>
     b08:	a809883a 	mov	r4,r21
     b0c:	a00b883a 	mov	r5,r20
     b10:	1025883a 	mov	r18,r2
     b14:	00012800 	call	1280 <__umodsi3>
     b18:	1004943a 	slli	r2,r2,16
     b1c:	813fffcc 	andi	r4,r16,65535
     b20:	d8c00217 	ldw	r3,8(sp)
     b24:	20a0b03a 	or	r16,r4,r2
     b28:	d9c00517 	ldw	r7,20(sp)
     b2c:	da000417 	ldw	r8,16(sp)
     b30:	8480062e 	bgeu	r16,r18,b4c <__divdf3+0x5b8>
     b34:	85a1883a 	add	r16,r16,r22
     b38:	40bfffc4 	addi	r2,r8,-1
     b3c:	8580ac36 	bltu	r16,r22,df0 <__divdf3+0x85c>
     b40:	8480ab2e 	bgeu	r16,r18,df0 <__divdf3+0x85c>
     b44:	423fff84 	addi	r8,r8,-2
     b48:	85a1883a 	add	r16,r16,r22
     b4c:	3804943a 	slli	r2,r7,16
     b50:	84a1c83a 	sub	r16,r16,r18
     b54:	e009883a 	mov	r4,fp
     b58:	1228b03a 	or	r20,r2,r8
     b5c:	a1ffffcc 	andi	r7,r20,65535
     b60:	a024d43a 	srli	r18,r20,16
     b64:	380b883a 	mov	r5,r7
     b68:	d8c00215 	stw	r3,8(sp)
     b6c:	d9c00515 	stw	r7,20(sp)
     b70:	00012d80 	call	12d8 <__mulsi3>
     b74:	900b883a 	mov	r5,r18
     b78:	e009883a 	mov	r4,fp
     b7c:	102b883a 	mov	r21,r2
     b80:	00012d80 	call	12d8 <__mulsi3>
     b84:	900b883a 	mov	r5,r18
     b88:	b809883a 	mov	r4,r23
     b8c:	1039883a 	mov	fp,r2
     b90:	00012d80 	call	12d8 <__mulsi3>
     b94:	d9c00517 	ldw	r7,20(sp)
     b98:	b80b883a 	mov	r5,r23
     b9c:	1025883a 	mov	r18,r2
     ba0:	3809883a 	mov	r4,r7
     ba4:	00012d80 	call	12d8 <__mulsi3>
     ba8:	a808d43a 	srli	r4,r21,16
     bac:	1705883a 	add	r2,r2,fp
     bb0:	d8c00217 	ldw	r3,8(sp)
     bb4:	2085883a 	add	r2,r4,r2
     bb8:	1700022e 	bgeu	r2,fp,bc4 <__divdf3+0x630>
     bbc:	01000074 	movhi	r4,1
     bc0:	9125883a 	add	r18,r18,r4
     bc4:	1008d43a 	srli	r4,r2,16
     bc8:	1004943a 	slli	r2,r2,16
     bcc:	ad7fffcc 	andi	r21,r21,65535
     bd0:	2489883a 	add	r4,r4,r18
     bd4:	1545883a 	add	r2,r2,r21
     bd8:	81003836 	bltu	r16,r4,cbc <__divdf3+0x728>
     bdc:	81003626 	beq	r16,r4,cb8 <__divdf3+0x724>
     be0:	a5000054 	ori	r20,r20,1
     be4:	1880ffc4 	addi	r2,r3,1023
     be8:	00bf2e0e 	bge	zero,r2,8a4 <__divdf3+0x310>
     bec:	a10001cc 	andi	r4,r20,7
     bf0:	20000726 	beq	r4,zero,c10 <__divdf3+0x67c>
     bf4:	a10003cc 	andi	r4,r20,15
     bf8:	01400104 	movi	r5,4
     bfc:	21400426 	beq	r4,r5,c10 <__divdf3+0x67c>
     c00:	a149883a 	add	r4,r20,r5
     c04:	2529803a 	cmpltu	r20,r4,r20
     c08:	8d23883a 	add	r17,r17,r20
     c0c:	2029883a 	mov	r20,r4
     c10:	8900402c 	andhi	r4,r17,256
     c14:	20000426 	beq	r4,zero,c28 <__divdf3+0x694>
     c18:	18810004 	addi	r2,r3,1024
     c1c:	00ffc034 	movhi	r3,65280
     c20:	18ffffc4 	addi	r3,r3,-1
     c24:	88e2703a 	and	r17,r17,r3
     c28:	00c1ff84 	movi	r3,2046
     c2c:	18beb416 	blt	r3,r2,700 <__divdf3+0x16c>
     c30:	a028d0fa 	srli	r20,r20,3
     c34:	882a977a 	slli	r21,r17,29
     c38:	8820927a 	slli	r16,r17,9
     c3c:	1081ffcc 	andi	r2,r2,2047
     c40:	ad2ab03a 	or	r21,r21,r20
     c44:	8020d33a 	srli	r16,r16,12
     c48:	9900004c 	andi	r4,r19,1
     c4c:	003eb006 	br	710 <__divdf3+0x17c>
     c50:	8080022c 	andhi	r2,r16,8
     c54:	10001226 	beq	r2,zero,ca0 <__divdf3+0x70c>
     c58:	8880022c 	andhi	r2,r17,8
     c5c:	1000101e 	bne	r2,zero,ca0 <__divdf3+0x70c>
     c60:	00800434 	movhi	r2,16
     c64:	8c000234 	orhi	r16,r17,8
     c68:	10bfffc4 	addi	r2,r2,-1
     c6c:	b809883a 	mov	r4,r23
     c70:	80a0703a 	and	r16,r16,r2
     c74:	a02b883a 	mov	r21,r20
     c78:	003f0806 	br	89c <__divdf3+0x308>
     c7c:	008000c4 	movi	r2,3
     c80:	3880b126 	beq	r7,r2,f48 <__divdf3+0x9b4>
     c84:	00800044 	movi	r2,1
     c88:	38805b1e 	bne	r7,r2,df8 <__divdf3+0x864>
     c8c:	e009883a 	mov	r4,fp
     c90:	0005883a 	mov	r2,zero
     c94:	0021883a 	mov	r16,zero
     c98:	002b883a 	mov	r21,zero
     c9c:	003e9c06 	br	710 <__divdf3+0x17c>
     ca0:	00800434 	movhi	r2,16
     ca4:	84000234 	orhi	r16,r16,8
     ca8:	10bfffc4 	addi	r2,r2,-1
     cac:	b009883a 	mov	r4,r22
     cb0:	80a0703a 	and	r16,r16,r2
     cb4:	003ef906 	br	89c <__divdf3+0x308>
     cb8:	103fca26 	beq	r2,zero,be4 <__divdf3+0x650>
     cbc:	b421883a 	add	r16,r22,r16
     cc0:	a17fffc4 	addi	r5,r20,-1
     cc4:	8580422e 	bgeu	r16,r22,dd0 <__divdf3+0x83c>
     cc8:	2829883a 	mov	r20,r5
     ccc:	813fc41e 	bne	r16,r4,be0 <__divdf3+0x64c>
     cd0:	d9800017 	ldw	r6,0(sp)
     cd4:	30bfc21e 	bne	r6,r2,be0 <__divdf3+0x64c>
     cd8:	003fc206 	br	be4 <__divdf3+0x650>
     cdc:	143ff604 	addi	r16,r2,-40
     ce0:	8c20983a 	sll	r16,r17,r16
     ce4:	002b883a 	mov	r21,zero
     ce8:	003eb406 	br	7bc <__divdf3+0x228>
     cec:	d9800215 	stw	r6,8(sp)
     cf0:	d9c00515 	stw	r7,20(sp)
     cf4:	da000415 	stw	r8,16(sp)
     cf8:	00010c00 	call	10c0 <__clzsi2>
     cfc:	10800804 	addi	r2,r2,32
     d00:	da000417 	ldw	r8,16(sp)
     d04:	d9c00517 	ldw	r7,20(sp)
     d08:	d9800217 	ldw	r6,8(sp)
     d0c:	003ea106 	br	794 <__divdf3+0x200>
     d10:	147ff604 	addi	r17,r2,-40
     d14:	3462983a 	sll	r17,r6,r17
     d18:	0029883a 	mov	r20,zero
     d1c:	003ec906 	br	844 <__divdf3+0x2b0>
     d20:	3009883a 	mov	r4,r6
     d24:	d9400115 	stw	r5,4(sp)
     d28:	d9800215 	stw	r6,8(sp)
     d2c:	da000415 	stw	r8,16(sp)
     d30:	da400315 	stw	r9,12(sp)
     d34:	00010c00 	call	10c0 <__clzsi2>
     d38:	10800804 	addi	r2,r2,32
     d3c:	da400317 	ldw	r9,12(sp)
     d40:	da000417 	ldw	r8,16(sp)
     d44:	d9800217 	ldw	r6,8(sp)
     d48:	d9400117 	ldw	r5,4(sp)
     d4c:	003eb306 	br	81c <__divdf3+0x288>
     d50:	d9800017 	ldw	r6,0(sp)
     d54:	a9ab883a 	add	r21,r21,r6
     d58:	a98b803a 	cmpltu	r5,r21,r6
     d5c:	2d8b883a 	add	r5,r5,r22
     d60:	2a11883a 	add	r8,r5,r8
     d64:	897fffc4 	addi	r5,r17,-1
     d68:	b2000c2e 	bgeu	r22,r8,d9c <__divdf3+0x808>
     d6c:	41003f36 	bltu	r8,r4,e6c <__divdf3+0x8d8>
     d70:	22006c26 	beq	r4,r8,f24 <__divdf3+0x990>
     d74:	4109c83a 	sub	r4,r8,r4
     d78:	2823883a 	mov	r17,r5
     d7c:	003f3b06 	br	a6c <__divdf3+0x4d8>
     d80:	ad3ed336 	bltu	r21,r20,8d0 <__divdf3+0x33c>
     d84:	a804d07a 	srli	r2,r21,1
     d88:	802e97fa 	slli	r23,r16,31
     d8c:	a82a97fa 	slli	r21,r21,31
     d90:	8020d07a 	srli	r16,r16,1
     d94:	b8aeb03a 	or	r23,r23,r2
     d98:	003ed006 	br	8dc <__divdf3+0x348>
     d9c:	b23ff51e 	bne	r22,r8,d74 <__divdf3+0x7e0>
     da0:	d9800017 	ldw	r6,0(sp)
     da4:	a9bff12e 	bgeu	r21,r6,d6c <__divdf3+0x7d8>
     da8:	b109c83a 	sub	r4,r22,r4
     dac:	2823883a 	mov	r17,r5
     db0:	003f2e06 	br	a6c <__divdf3+0x4d8>
     db4:	2021883a 	mov	r16,r4
     db8:	003eff06 	br	9b8 <__divdf3+0x424>
     dbc:	2023883a 	mov	r17,r4
     dc0:	003ee406 	br	954 <__divdf3+0x3c0>
     dc4:	a8bfe236 	bltu	r21,r2,d50 <__divdf3+0x7bc>
     dc8:	0009883a 	mov	r4,zero
     dcc:	003f2706 	br	a6c <__divdf3+0x4d8>
     dd0:	81002d36 	bltu	r16,r4,e88 <__divdf3+0x8f4>
     dd4:	24005626 	beq	r4,r16,f30 <__divdf3+0x99c>
     dd8:	2829883a 	mov	r20,r5
     ddc:	003f8006 	br	be0 <__divdf3+0x64c>
     de0:	053fffc4 	movi	r20,-1
     de4:	003f7f06 	br	be4 <__divdf3+0x650>
     de8:	200f883a 	mov	r7,r4
     dec:	003f3c06 	br	ae0 <__divdf3+0x54c>
     df0:	1011883a 	mov	r8,r2
     df4:	003f5506 	br	b4c <__divdf3+0x5b8>
     df8:	e027883a 	mov	r19,fp
     dfc:	003f7906 	br	be4 <__divdf3+0x650>
     e00:	010007c4 	movi	r4,31
     e04:	20c02816 	blt	r4,r3,ea8 <__divdf3+0x914>
     e08:	00800804 	movi	r2,32
     e0c:	10c5c83a 	sub	r2,r2,r3
     e10:	888a983a 	sll	r5,r17,r2
     e14:	a0c8d83a 	srl	r4,r20,r3
     e18:	a084983a 	sll	r2,r20,r2
     e1c:	88e2d83a 	srl	r17,r17,r3
     e20:	2906b03a 	or	r3,r5,r4
     e24:	1004c03a 	cmpne	r2,r2,zero
     e28:	1886b03a 	or	r3,r3,r2
     e2c:	188001cc 	andi	r2,r3,7
     e30:	10000726 	beq	r2,zero,e50 <__divdf3+0x8bc>
     e34:	188003cc 	andi	r2,r3,15
     e38:	01000104 	movi	r4,4
     e3c:	11000426 	beq	r2,r4,e50 <__divdf3+0x8bc>
     e40:	1805883a 	mov	r2,r3
     e44:	10c00104 	addi	r3,r2,4
     e48:	1885803a 	cmpltu	r2,r3,r2
     e4c:	88a3883a 	add	r17,r17,r2
     e50:	8880202c 	andhi	r2,r17,128
     e54:	10002926 	beq	r2,zero,efc <__divdf3+0x968>
     e58:	9900004c 	andi	r4,r19,1
     e5c:	00800044 	movi	r2,1
     e60:	0021883a 	mov	r16,zero
     e64:	002b883a 	mov	r21,zero
     e68:	003e2906 	br	710 <__divdf3+0x17c>
     e6c:	d9800017 	ldw	r6,0(sp)
     e70:	8c7fff84 	addi	r17,r17,-2
     e74:	a9ab883a 	add	r21,r21,r6
     e78:	a98b803a 	cmpltu	r5,r21,r6
     e7c:	2d8b883a 	add	r5,r5,r22
     e80:	2a11883a 	add	r8,r5,r8
     e84:	003ef806 	br	a68 <__divdf3+0x4d4>
     e88:	d9800017 	ldw	r6,0(sp)
     e8c:	318f883a 	add	r7,r6,r6
     e90:	398b803a 	cmpltu	r5,r7,r6
     e94:	2d8d883a 	add	r6,r5,r22
     e98:	81a1883a 	add	r16,r16,r6
     e9c:	a17fff84 	addi	r5,r20,-2
     ea0:	d9c00015 	stw	r7,0(sp)
     ea4:	003f8806 	br	cc8 <__divdf3+0x734>
     ea8:	013ff844 	movi	r4,-31
     eac:	2085c83a 	sub	r2,r4,r2
     eb0:	8888d83a 	srl	r4,r17,r2
     eb4:	00800804 	movi	r2,32
     eb8:	18802126 	beq	r3,r2,f40 <__divdf3+0x9ac>
     ebc:	04001004 	movi	r16,64
     ec0:	80c7c83a 	sub	r3,r16,r3
     ec4:	88e0983a 	sll	r16,r17,r3
     ec8:	8504b03a 	or	r2,r16,r20
     ecc:	1004c03a 	cmpne	r2,r2,zero
     ed0:	2084b03a 	or	r2,r4,r2
     ed4:	144001cc 	andi	r17,r2,7
     ed8:	88000d1e 	bne	r17,zero,f10 <__divdf3+0x97c>
     edc:	0021883a 	mov	r16,zero
     ee0:	102ad0fa 	srli	r21,r2,3
     ee4:	9900004c 	andi	r4,r19,1
     ee8:	0005883a 	mov	r2,zero
     eec:	ac6ab03a 	or	r21,r21,r17
     ef0:	003e0706 	br	710 <__divdf3+0x17c>
     ef4:	1007883a 	mov	r3,r2
     ef8:	0023883a 	mov	r17,zero
     efc:	8820927a 	slli	r16,r17,9
     f00:	1805883a 	mov	r2,r3
     f04:	8822977a 	slli	r17,r17,29
     f08:	8020d33a 	srli	r16,r16,12
     f0c:	003ff406 	br	ee0 <__divdf3+0x94c>
     f10:	10c003cc 	andi	r3,r2,15
     f14:	01000104 	movi	r4,4
     f18:	193ff626 	beq	r3,r4,ef4 <__divdf3+0x960>
     f1c:	0023883a 	mov	r17,zero
     f20:	003fc806 	br	e44 <__divdf3+0x8b0>
     f24:	a8bfd136 	bltu	r21,r2,e6c <__divdf3+0x8d8>
     f28:	2823883a 	mov	r17,r5
     f2c:	003fa606 	br	dc8 <__divdf3+0x834>
     f30:	d9800017 	ldw	r6,0(sp)
     f34:	30bfd436 	bltu	r6,r2,e88 <__divdf3+0x8f4>
     f38:	2829883a 	mov	r20,r5
     f3c:	003f6406 	br	cd0 <__divdf3+0x73c>
     f40:	0021883a 	mov	r16,zero
     f44:	003fe006 	br	ec8 <__divdf3+0x934>
     f48:	00800434 	movhi	r2,16
     f4c:	8c000234 	orhi	r16,r17,8
     f50:	10bfffc4 	addi	r2,r2,-1
     f54:	e009883a 	mov	r4,fp
     f58:	80a0703a 	and	r16,r16,r2
     f5c:	a02b883a 	mov	r21,r20
     f60:	003e4e06 	br	89c <__divdf3+0x308>

00000f64 <__fixdfsi>:
     f64:	280cd53a 	srli	r6,r5,20
     f68:	00c00434 	movhi	r3,16
     f6c:	18ffffc4 	addi	r3,r3,-1
     f70:	3181ffcc 	andi	r6,r6,2047
     f74:	01c0ff84 	movi	r7,1022
     f78:	28c6703a 	and	r3,r5,r3
     f7c:	280ad7fa 	srli	r5,r5,31
     f80:	3980120e 	bge	r7,r6,fcc <__fixdfsi+0x68>
     f84:	00810744 	movi	r2,1053
     f88:	11800c16 	blt	r2,r6,fbc <__fixdfsi+0x58>
     f8c:	00810cc4 	movi	r2,1075
     f90:	1185c83a 	sub	r2,r2,r6
     f94:	01c007c4 	movi	r7,31
     f98:	18c00434 	orhi	r3,r3,16
     f9c:	38800d16 	blt	r7,r2,fd4 <__fixdfsi+0x70>
     fa0:	31befb44 	addi	r6,r6,-1043
     fa4:	2084d83a 	srl	r2,r4,r2
     fa8:	1986983a 	sll	r3,r3,r6
     fac:	1884b03a 	or	r2,r3,r2
     fb0:	28000726 	beq	r5,zero,fd0 <__fixdfsi+0x6c>
     fb4:	0085c83a 	sub	r2,zero,r2
     fb8:	f800283a 	ret
     fbc:	00a00034 	movhi	r2,32768
     fc0:	10bfffc4 	addi	r2,r2,-1
     fc4:	2885883a 	add	r2,r5,r2
     fc8:	f800283a 	ret
     fcc:	0005883a 	mov	r2,zero
     fd0:	f800283a 	ret
     fd4:	008104c4 	movi	r2,1043
     fd8:	1185c83a 	sub	r2,r2,r6
     fdc:	1884d83a 	srl	r2,r3,r2
     fe0:	003ff306 	br	fb0 <__fixdfsi+0x4c>

00000fe4 <__floatsidf>:
     fe4:	defffd04 	addi	sp,sp,-12
     fe8:	dfc00215 	stw	ra,8(sp)
     fec:	dc400115 	stw	r17,4(sp)
     ff0:	dc000015 	stw	r16,0(sp)
     ff4:	20002b26 	beq	r4,zero,10a4 <__floatsidf+0xc0>
     ff8:	2023883a 	mov	r17,r4
     ffc:	2020d7fa 	srli	r16,r4,31
    1000:	20002d16 	blt	r4,zero,10b8 <__floatsidf+0xd4>
    1004:	8809883a 	mov	r4,r17
    1008:	00010c00 	call	10c0 <__clzsi2>
    100c:	01410784 	movi	r5,1054
    1010:	288bc83a 	sub	r5,r5,r2
    1014:	01010cc4 	movi	r4,1075
    1018:	2149c83a 	sub	r4,r4,r5
    101c:	00c007c4 	movi	r3,31
    1020:	1900160e 	bge	r3,r4,107c <__floatsidf+0x98>
    1024:	00c104c4 	movi	r3,1043
    1028:	1947c83a 	sub	r3,r3,r5
    102c:	88c6983a 	sll	r3,r17,r3
    1030:	00800434 	movhi	r2,16
    1034:	10bfffc4 	addi	r2,r2,-1
    1038:	1886703a 	and	r3,r3,r2
    103c:	2941ffcc 	andi	r5,r5,2047
    1040:	800d883a 	mov	r6,r16
    1044:	0005883a 	mov	r2,zero
    1048:	280a953a 	slli	r5,r5,20
    104c:	31803fcc 	andi	r6,r6,255
    1050:	01000434 	movhi	r4,16
    1054:	300c97fa 	slli	r6,r6,31
    1058:	213fffc4 	addi	r4,r4,-1
    105c:	1906703a 	and	r3,r3,r4
    1060:	1946b03a 	or	r3,r3,r5
    1064:	1986b03a 	or	r3,r3,r6
    1068:	dfc00217 	ldw	ra,8(sp)
    106c:	dc400117 	ldw	r17,4(sp)
    1070:	dc000017 	ldw	r16,0(sp)
    1074:	dec00304 	addi	sp,sp,12
    1078:	f800283a 	ret
    107c:	00c002c4 	movi	r3,11
    1080:	1887c83a 	sub	r3,r3,r2
    1084:	88c6d83a 	srl	r3,r17,r3
    1088:	8904983a 	sll	r2,r17,r4
    108c:	01000434 	movhi	r4,16
    1090:	213fffc4 	addi	r4,r4,-1
    1094:	2941ffcc 	andi	r5,r5,2047
    1098:	1906703a 	and	r3,r3,r4
    109c:	800d883a 	mov	r6,r16
    10a0:	003fe906 	br	1048 <__floatsidf+0x64>
    10a4:	000d883a 	mov	r6,zero
    10a8:	000b883a 	mov	r5,zero
    10ac:	0007883a 	mov	r3,zero
    10b0:	0005883a 	mov	r2,zero
    10b4:	003fe406 	br	1048 <__floatsidf+0x64>
    10b8:	0123c83a 	sub	r17,zero,r4
    10bc:	003fd106 	br	1004 <__floatsidf+0x20>

000010c0 <__clzsi2>:
    10c0:	00bfffd4 	movui	r2,65535
    10c4:	11000536 	bltu	r2,r4,10dc <__clzsi2+0x1c>
    10c8:	00803fc4 	movi	r2,255
    10cc:	11000f36 	bltu	r2,r4,110c <__clzsi2+0x4c>
    10d0:	00800804 	movi	r2,32
    10d4:	0007883a 	mov	r3,zero
    10d8:	00000506 	br	10f0 <__clzsi2+0x30>
    10dc:	00804034 	movhi	r2,256
    10e0:	10bfffc4 	addi	r2,r2,-1
    10e4:	11000c2e 	bgeu	r2,r4,1118 <__clzsi2+0x58>
    10e8:	00800204 	movi	r2,8
    10ec:	00c00604 	movi	r3,24
    10f0:	20c8d83a 	srl	r4,r4,r3
    10f4:	00c00074 	movhi	r3,1
    10f8:	18c00384 	addi	r3,r3,14
    10fc:	1909883a 	add	r4,r3,r4
    1100:	20c00003 	ldbu	r3,0(r4)
    1104:	10c5c83a 	sub	r2,r2,r3
    1108:	f800283a 	ret
    110c:	00800604 	movi	r2,24
    1110:	00c00204 	movi	r3,8
    1114:	003ff606 	br	10f0 <__clzsi2+0x30>
    1118:	00800404 	movi	r2,16
    111c:	1007883a 	mov	r3,r2
    1120:	003ff306 	br	10f0 <__clzsi2+0x30>

00001124 <__divsi3>:
    1124:	20001b16 	blt	r4,zero,1194 <__divsi3+0x70>
    1128:	000f883a 	mov	r7,zero
    112c:	28001616 	blt	r5,zero,1188 <__divsi3+0x64>
    1130:	200d883a 	mov	r6,r4
    1134:	29001a2e 	bgeu	r5,r4,11a0 <__divsi3+0x7c>
    1138:	00800804 	movi	r2,32
    113c:	00c00044 	movi	r3,1
    1140:	00000106 	br	1148 <__divsi3+0x24>
    1144:	10000d26 	beq	r2,zero,117c <__divsi3+0x58>
    1148:	294b883a 	add	r5,r5,r5
    114c:	10bfffc4 	addi	r2,r2,-1
    1150:	18c7883a 	add	r3,r3,r3
    1154:	293ffb36 	bltu	r5,r4,1144 <__divsi3+0x20>
    1158:	0005883a 	mov	r2,zero
    115c:	18000726 	beq	r3,zero,117c <__divsi3+0x58>
    1160:	0005883a 	mov	r2,zero
    1164:	31400236 	bltu	r6,r5,1170 <__divsi3+0x4c>
    1168:	314dc83a 	sub	r6,r6,r5
    116c:	10c4b03a 	or	r2,r2,r3
    1170:	1806d07a 	srli	r3,r3,1
    1174:	280ad07a 	srli	r5,r5,1
    1178:	183ffa1e 	bne	r3,zero,1164 <__divsi3+0x40>
    117c:	38000126 	beq	r7,zero,1184 <__divsi3+0x60>
    1180:	0085c83a 	sub	r2,zero,r2
    1184:	f800283a 	ret
    1188:	014bc83a 	sub	r5,zero,r5
    118c:	39c0005c 	xori	r7,r7,1
    1190:	003fe706 	br	1130 <__divsi3+0xc>
    1194:	0109c83a 	sub	r4,zero,r4
    1198:	01c00044 	movi	r7,1
    119c:	003fe306 	br	112c <__divsi3+0x8>
    11a0:	00c00044 	movi	r3,1
    11a4:	003fee06 	br	1160 <__divsi3+0x3c>

000011a8 <__modsi3>:
    11a8:	20001716 	blt	r4,zero,1208 <__modsi3+0x60>
    11ac:	000f883a 	mov	r7,zero
    11b0:	2005883a 	mov	r2,r4
    11b4:	28001216 	blt	r5,zero,1200 <__modsi3+0x58>
    11b8:	2900162e 	bgeu	r5,r4,1214 <__modsi3+0x6c>
    11bc:	01800804 	movi	r6,32
    11c0:	00c00044 	movi	r3,1
    11c4:	00000106 	br	11cc <__modsi3+0x24>
    11c8:	30000a26 	beq	r6,zero,11f4 <__modsi3+0x4c>
    11cc:	294b883a 	add	r5,r5,r5
    11d0:	31bfffc4 	addi	r6,r6,-1
    11d4:	18c7883a 	add	r3,r3,r3
    11d8:	293ffb36 	bltu	r5,r4,11c8 <__modsi3+0x20>
    11dc:	18000526 	beq	r3,zero,11f4 <__modsi3+0x4c>
    11e0:	1806d07a 	srli	r3,r3,1
    11e4:	11400136 	bltu	r2,r5,11ec <__modsi3+0x44>
    11e8:	1145c83a 	sub	r2,r2,r5
    11ec:	280ad07a 	srli	r5,r5,1
    11f0:	183ffb1e 	bne	r3,zero,11e0 <__modsi3+0x38>
    11f4:	38000126 	beq	r7,zero,11fc <__modsi3+0x54>
    11f8:	0085c83a 	sub	r2,zero,r2
    11fc:	f800283a 	ret
    1200:	014bc83a 	sub	r5,zero,r5
    1204:	003fec06 	br	11b8 <__modsi3+0x10>
    1208:	0109c83a 	sub	r4,zero,r4
    120c:	01c00044 	movi	r7,1
    1210:	003fe706 	br	11b0 <__modsi3+0x8>
    1214:	00c00044 	movi	r3,1
    1218:	003ff106 	br	11e0 <__modsi3+0x38>

0000121c <__udivsi3>:
    121c:	200d883a 	mov	r6,r4
    1220:	2900152e 	bgeu	r5,r4,1278 <__udivsi3+0x5c>
    1224:	28001416 	blt	r5,zero,1278 <__udivsi3+0x5c>
    1228:	00800804 	movi	r2,32
    122c:	00c00044 	movi	r3,1
    1230:	00000206 	br	123c <__udivsi3+0x20>
    1234:	10000e26 	beq	r2,zero,1270 <__udivsi3+0x54>
    1238:	28000516 	blt	r5,zero,1250 <__udivsi3+0x34>
    123c:	294b883a 	add	r5,r5,r5
    1240:	10bfffc4 	addi	r2,r2,-1
    1244:	18c7883a 	add	r3,r3,r3
    1248:	293ffa36 	bltu	r5,r4,1234 <__udivsi3+0x18>
    124c:	18000826 	beq	r3,zero,1270 <__udivsi3+0x54>
    1250:	0005883a 	mov	r2,zero
    1254:	31400236 	bltu	r6,r5,1260 <__udivsi3+0x44>
    1258:	314dc83a 	sub	r6,r6,r5
    125c:	10c4b03a 	or	r2,r2,r3
    1260:	1806d07a 	srli	r3,r3,1
    1264:	280ad07a 	srli	r5,r5,1
    1268:	183ffa1e 	bne	r3,zero,1254 <__udivsi3+0x38>
    126c:	f800283a 	ret
    1270:	0005883a 	mov	r2,zero
    1274:	f800283a 	ret
    1278:	00c00044 	movi	r3,1
    127c:	003ff406 	br	1250 <__udivsi3+0x34>

00001280 <__umodsi3>:
    1280:	2005883a 	mov	r2,r4
    1284:	2900122e 	bgeu	r5,r4,12d0 <__umodsi3+0x50>
    1288:	28001116 	blt	r5,zero,12d0 <__umodsi3+0x50>
    128c:	01800804 	movi	r6,32
    1290:	00c00044 	movi	r3,1
    1294:	00000206 	br	12a0 <__umodsi3+0x20>
    1298:	30000c26 	beq	r6,zero,12cc <__umodsi3+0x4c>
    129c:	28000516 	blt	r5,zero,12b4 <__umodsi3+0x34>
    12a0:	294b883a 	add	r5,r5,r5
    12a4:	31bfffc4 	addi	r6,r6,-1
    12a8:	18c7883a 	add	r3,r3,r3
    12ac:	293ffa36 	bltu	r5,r4,1298 <__umodsi3+0x18>
    12b0:	18000626 	beq	r3,zero,12cc <__umodsi3+0x4c>
    12b4:	1806d07a 	srli	r3,r3,1
    12b8:	11400136 	bltu	r2,r5,12c0 <__umodsi3+0x40>
    12bc:	1145c83a 	sub	r2,r2,r5
    12c0:	280ad07a 	srli	r5,r5,1
    12c4:	183ffb1e 	bne	r3,zero,12b4 <__umodsi3+0x34>
    12c8:	f800283a 	ret
    12cc:	f800283a 	ret
    12d0:	00c00044 	movi	r3,1
    12d4:	003ff706 	br	12b4 <__umodsi3+0x34>

000012d8 <__mulsi3>:
    12d8:	0005883a 	mov	r2,zero
    12dc:	20000726 	beq	r4,zero,12fc <__mulsi3+0x24>
    12e0:	20c0004c 	andi	r3,r4,1
    12e4:	2008d07a 	srli	r4,r4,1
    12e8:	18000126 	beq	r3,zero,12f0 <__mulsi3+0x18>
    12ec:	1145883a 	add	r2,r2,r5
    12f0:	294b883a 	add	r5,r5,r5
    12f4:	203ffa1e 	bne	r4,zero,12e0 <__mulsi3+0x8>
    12f8:	f800283a 	ret
    12fc:	f800283a 	ret

00001300 <_puts_r>:
    1300:	defffd04 	addi	sp,sp,-12
    1304:	dc000015 	stw	r16,0(sp)
    1308:	2021883a 	mov	r16,r4
    130c:	2809883a 	mov	r4,r5
    1310:	dfc00215 	stw	ra,8(sp)
    1314:	dc400115 	stw	r17,4(sp)
    1318:	2823883a 	mov	r17,r5
    131c:	00013940 	call	1394 <strlen>
    1320:	81400217 	ldw	r5,8(r16)
    1324:	01000034 	movhi	r4,0
    1328:	2104ec04 	addi	r4,r4,5040
    132c:	29000115 	stw	r4,4(r5)
    1330:	100f883a 	mov	r7,r2
    1334:	880d883a 	mov	r6,r17
    1338:	8009883a 	mov	r4,r16
    133c:	00013b00 	call	13b0 <__sfvwrite_small_dev>
    1340:	00ffffc4 	movi	r3,-1
    1344:	10c00926 	beq	r2,r3,136c <_puts_r+0x6c>
    1348:	81400217 	ldw	r5,8(r16)
    134c:	01800074 	movhi	r6,1
    1350:	01c00044 	movi	r7,1
    1354:	28800117 	ldw	r2,4(r5)
    1358:	31804404 	addi	r6,r6,272
    135c:	8009883a 	mov	r4,r16
    1360:	103ee83a 	callr	r2
    1364:	10bfffe0 	cmpeqi	r2,r2,-1
    1368:	0085c83a 	sub	r2,zero,r2
    136c:	dfc00217 	ldw	ra,8(sp)
    1370:	dc400117 	ldw	r17,4(sp)
    1374:	dc000017 	ldw	r16,0(sp)
    1378:	dec00304 	addi	sp,sp,12
    137c:	f800283a 	ret

00001380 <puts>:
    1380:	00800074 	movhi	r2,1
    1384:	10810404 	addi	r2,r2,1040
    1388:	200b883a 	mov	r5,r4
    138c:	11000017 	ldw	r4,0(r2)
    1390:	00013001 	jmpi	1300 <_puts_r>

00001394 <strlen>:
    1394:	2005883a 	mov	r2,r4
    1398:	10c00007 	ldb	r3,0(r2)
    139c:	18000226 	beq	r3,zero,13a8 <strlen+0x14>
    13a0:	10800044 	addi	r2,r2,1
    13a4:	003ffc06 	br	1398 <strlen+0x4>
    13a8:	1105c83a 	sub	r2,r2,r4
    13ac:	f800283a 	ret

000013b0 <__sfvwrite_small_dev>:
    13b0:	2880000b 	ldhu	r2,0(r5)
    13b4:	1080020c 	andi	r2,r2,8
    13b8:	10002126 	beq	r2,zero,1440 <__sfvwrite_small_dev+0x90>
    13bc:	2880008f 	ldh	r2,2(r5)
    13c0:	defffa04 	addi	sp,sp,-24
    13c4:	dc000015 	stw	r16,0(sp)
    13c8:	dfc00515 	stw	ra,20(sp)
    13cc:	dd000415 	stw	r20,16(sp)
    13d0:	dcc00315 	stw	r19,12(sp)
    13d4:	dc800215 	stw	r18,8(sp)
    13d8:	dc400115 	stw	r17,4(sp)
    13dc:	2821883a 	mov	r16,r5
    13e0:	10001216 	blt	r2,zero,142c <__sfvwrite_small_dev+0x7c>
    13e4:	2027883a 	mov	r19,r4
    13e8:	3025883a 	mov	r18,r6
    13ec:	3823883a 	mov	r17,r7
    13f0:	05010004 	movi	r20,1024
    13f4:	04400b0e 	bge	zero,r17,1424 <__sfvwrite_small_dev+0x74>
    13f8:	880f883a 	mov	r7,r17
    13fc:	a440010e 	bge	r20,r17,1404 <__sfvwrite_small_dev+0x54>
    1400:	01c10004 	movi	r7,1024
    1404:	8140008f 	ldh	r5,2(r16)
    1408:	900d883a 	mov	r6,r18
    140c:	9809883a 	mov	r4,r19
    1410:	00014680 	call	1468 <_write_r>
    1414:	0080050e 	bge	zero,r2,142c <__sfvwrite_small_dev+0x7c>
    1418:	88a3c83a 	sub	r17,r17,r2
    141c:	90a5883a 	add	r18,r18,r2
    1420:	003ff406 	br	13f4 <__sfvwrite_small_dev+0x44>
    1424:	0005883a 	mov	r2,zero
    1428:	00000706 	br	1448 <__sfvwrite_small_dev+0x98>
    142c:	8080000b 	ldhu	r2,0(r16)
    1430:	10801014 	ori	r2,r2,64
    1434:	8080000d 	sth	r2,0(r16)
    1438:	00bfffc4 	movi	r2,-1
    143c:	00000206 	br	1448 <__sfvwrite_small_dev+0x98>
    1440:	00bfffc4 	movi	r2,-1
    1444:	f800283a 	ret
    1448:	dfc00517 	ldw	ra,20(sp)
    144c:	dd000417 	ldw	r20,16(sp)
    1450:	dcc00317 	ldw	r19,12(sp)
    1454:	dc800217 	ldw	r18,8(sp)
    1458:	dc400117 	ldw	r17,4(sp)
    145c:	dc000017 	ldw	r16,0(sp)
    1460:	dec00604 	addi	sp,sp,24
    1464:	f800283a 	ret

00001468 <_write_r>:
    1468:	defffd04 	addi	sp,sp,-12
    146c:	dc000015 	stw	r16,0(sp)
    1470:	04000074 	movhi	r16,1
    1474:	dc400115 	stw	r17,4(sp)
    1478:	84010e04 	addi	r16,r16,1080
    147c:	2023883a 	mov	r17,r4
    1480:	2809883a 	mov	r4,r5
    1484:	300b883a 	mov	r5,r6
    1488:	380d883a 	mov	r6,r7
    148c:	dfc00215 	stw	ra,8(sp)
    1490:	80000015 	stw	zero,0(r16)
    1494:	00018140 	call	1814 <write>
    1498:	00ffffc4 	movi	r3,-1
    149c:	10c0031e 	bne	r2,r3,14ac <_write_r+0x44>
    14a0:	80c00017 	ldw	r3,0(r16)
    14a4:	18000126 	beq	r3,zero,14ac <_write_r+0x44>
    14a8:	88c00015 	stw	r3,0(r17)
    14ac:	dfc00217 	ldw	ra,8(sp)
    14b0:	dc400117 	ldw	r17,4(sp)
    14b4:	dc000017 	ldw	r16,0(sp)
    14b8:	dec00304 	addi	sp,sp,12
    14bc:	f800283a 	ret

000014c0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    14c0:	defff004 	addi	sp,sp,-64
    14c4:	df000f15 	stw	fp,60(sp)
    14c8:	df000f04 	addi	fp,sp,60
    14cc:	e13ffd15 	stw	r4,-12(fp)
    14d0:	e17ffe15 	stw	r5,-8(fp)
    14d4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    14d8:	00bffa84 	movi	r2,-22
    14dc:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    14e0:	e0bffd17 	ldw	r2,-12(fp)
    14e4:	10800828 	cmpgeui	r2,r2,32
    14e8:	1000501e 	bne	r2,zero,162c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    14ec:	0005303a 	rdctl	r2,status
    14f0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    14f4:	e0fff617 	ldw	r3,-40(fp)
    14f8:	00bfff84 	movi	r2,-2
    14fc:	1884703a 	and	r2,r3,r2
    1500:	1001703a 	wrctl	status,r2
  
  return context;
    1504:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    1508:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    150c:	00800074 	movhi	r2,1
    1510:	10811404 	addi	r2,r2,1104
    1514:	e0fffd17 	ldw	r3,-12(fp)
    1518:	180690fa 	slli	r3,r3,3
    151c:	10c5883a 	add	r2,r2,r3
    1520:	e0ffff17 	ldw	r3,-4(fp)
    1524:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    1528:	00800074 	movhi	r2,1
    152c:	10811404 	addi	r2,r2,1104
    1530:	e0fffd17 	ldw	r3,-12(fp)
    1534:	180690fa 	slli	r3,r3,3
    1538:	10c5883a 	add	r2,r2,r3
    153c:	10800104 	addi	r2,r2,4
    1540:	e0fffe17 	ldw	r3,-8(fp)
    1544:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    1548:	e0bfff17 	ldw	r2,-4(fp)
    154c:	10001926 	beq	r2,zero,15b4 <alt_irq_register+0xf4>
    1550:	e0bffd17 	ldw	r2,-12(fp)
    1554:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1558:	0005303a 	rdctl	r2,status
    155c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1560:	e0fff717 	ldw	r3,-36(fp)
    1564:	00bfff84 	movi	r2,-2
    1568:	1884703a 	and	r2,r3,r2
    156c:	1001703a 	wrctl	status,r2
  
  return context;
    1570:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1574:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    1578:	00c00044 	movi	r3,1
    157c:	e0bff217 	ldw	r2,-56(fp)
    1580:	1884983a 	sll	r2,r3,r2
    1584:	1007883a 	mov	r3,r2
    1588:	d0a00c17 	ldw	r2,-32720(gp)
    158c:	1884b03a 	or	r2,r3,r2
    1590:	d0a00c15 	stw	r2,-32720(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1594:	d0a00c17 	ldw	r2,-32720(gp)
    1598:	100170fa 	wrctl	ienable,r2
    159c:	e0bff817 	ldw	r2,-32(fp)
    15a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    15a4:	e0bff917 	ldw	r2,-28(fp)
    15a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    15ac:	0005883a 	mov	r2,zero
    15b0:	00001906 	br	1618 <alt_irq_register+0x158>
    15b4:	e0bffd17 	ldw	r2,-12(fp)
    15b8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    15bc:	0005303a 	rdctl	r2,status
    15c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    15c4:	e0fffa17 	ldw	r3,-24(fp)
    15c8:	00bfff84 	movi	r2,-2
    15cc:	1884703a 	and	r2,r3,r2
    15d0:	1001703a 	wrctl	status,r2
  
  return context;
    15d4:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    15d8:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    15dc:	00c00044 	movi	r3,1
    15e0:	e0bff417 	ldw	r2,-48(fp)
    15e4:	1884983a 	sll	r2,r3,r2
    15e8:	0084303a 	nor	r2,zero,r2
    15ec:	1007883a 	mov	r3,r2
    15f0:	d0a00c17 	ldw	r2,-32720(gp)
    15f4:	1884703a 	and	r2,r3,r2
    15f8:	d0a00c15 	stw	r2,-32720(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    15fc:	d0a00c17 	ldw	r2,-32720(gp)
    1600:	100170fa 	wrctl	ienable,r2
    1604:	e0bffb17 	ldw	r2,-20(fp)
    1608:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    160c:	e0bffc17 	ldw	r2,-16(fp)
    1610:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1614:	0005883a 	mov	r2,zero
    1618:	e0bff115 	stw	r2,-60(fp)
    161c:	e0bff317 	ldw	r2,-52(fp)
    1620:	e0bff515 	stw	r2,-44(fp)
    1624:	e0bff517 	ldw	r2,-44(fp)
    1628:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    162c:	e0bff117 	ldw	r2,-60(fp)
}
    1630:	e037883a 	mov	sp,fp
    1634:	df000017 	ldw	fp,0(sp)
    1638:	dec00104 	addi	sp,sp,4
    163c:	f800283a 	ret

00001640 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    1640:	defffc04 	addi	sp,sp,-16
    1644:	df000315 	stw	fp,12(sp)
    1648:	df000304 	addi	fp,sp,12
    164c:	e13ffd15 	stw	r4,-12(fp)
    1650:	e17ffe15 	stw	r5,-8(fp)
    1654:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    1658:	e0fffe17 	ldw	r3,-8(fp)
    165c:	e0bffd17 	ldw	r2,-12(fp)
    1660:	18800c26 	beq	r3,r2,1694 <alt_load_section+0x54>
  {
    while( to != end )
    1664:	00000806 	br	1688 <alt_load_section+0x48>
    {
      *to++ = *from++;
    1668:	e0bffe17 	ldw	r2,-8(fp)
    166c:	10c00104 	addi	r3,r2,4
    1670:	e0fffe15 	stw	r3,-8(fp)
    1674:	e0fffd17 	ldw	r3,-12(fp)
    1678:	19000104 	addi	r4,r3,4
    167c:	e13ffd15 	stw	r4,-12(fp)
    1680:	18c00017 	ldw	r3,0(r3)
    1684:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1688:	e0fffe17 	ldw	r3,-8(fp)
    168c:	e0bfff17 	ldw	r2,-4(fp)
    1690:	18bff51e 	bne	r3,r2,1668 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    1694:	0001883a 	nop
    1698:	e037883a 	mov	sp,fp
    169c:	df000017 	ldw	fp,0(sp)
    16a0:	dec00104 	addi	sp,sp,4
    16a4:	f800283a 	ret

000016a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    16a8:	defffe04 	addi	sp,sp,-8
    16ac:	dfc00115 	stw	ra,4(sp)
    16b0:	df000015 	stw	fp,0(sp)
    16b4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    16b8:	01800074 	movhi	r6,1
    16bc:	31810c04 	addi	r6,r6,1072
    16c0:	01400074 	movhi	r5,1
    16c4:	29405204 	addi	r5,r5,328
    16c8:	01000034 	movhi	r4,0
    16cc:	210adc04 	addi	r4,r4,11120
    16d0:	00016400 	call	1640 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    16d4:	01800034 	movhi	r6,0
    16d8:	31808c04 	addi	r6,r6,560
    16dc:	01400034 	movhi	r5,0
    16e0:	29400804 	addi	r5,r5,32
    16e4:	01000034 	movhi	r4,0
    16e8:	21000804 	addi	r4,r4,32
    16ec:	00016400 	call	1640 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    16f0:	01800074 	movhi	r6,1
    16f4:	31805204 	addi	r6,r6,328
    16f8:	01400074 	movhi	r5,1
    16fc:	29400004 	addi	r5,r5,0
    1700:	01000074 	movhi	r4,1
    1704:	21000004 	addi	r4,r4,0
    1708:	00016400 	call	1640 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    170c:	0001e600 	call	1e60 <alt_dcache_flush_all>
  alt_icache_flush_all();
    1710:	000204c0 	call	204c <alt_icache_flush_all>
}
    1714:	0001883a 	nop
    1718:	e037883a 	mov	sp,fp
    171c:	dfc00117 	ldw	ra,4(sp)
    1720:	df000017 	ldw	fp,0(sp)
    1724:	dec00204 	addi	sp,sp,8
    1728:	f800283a 	ret

0000172c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    172c:	defffd04 	addi	sp,sp,-12
    1730:	dfc00215 	stw	ra,8(sp)
    1734:	df000115 	stw	fp,4(sp)
    1738:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    173c:	0009883a 	mov	r4,zero
    1740:	00019480 	call	1948 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    1744:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1748:	00019800 	call	1980 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    174c:	01800074 	movhi	r6,1
    1750:	31804504 	addi	r6,r6,276
    1754:	01400074 	movhi	r5,1
    1758:	29404504 	addi	r5,r5,276
    175c:	01000074 	movhi	r4,1
    1760:	21004504 	addi	r4,r4,276
    1764:	00021500 	call	2150 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    1768:	0001f8c0 	call	1f8c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    176c:	01000034 	movhi	r4,0
    1770:	2107fb04 	addi	r4,r4,8172
    1774:	00027f00 	call	27f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    1778:	d0a00d17 	ldw	r2,-32716(gp)
    177c:	d0e00e17 	ldw	r3,-32712(gp)
    1780:	d1200f17 	ldw	r4,-32708(gp)
    1784:	200d883a 	mov	r6,r4
    1788:	180b883a 	mov	r5,r3
    178c:	1009883a 	mov	r4,r2
    1790:	00003bc0 	call	3bc <main>
    1794:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    1798:	01000044 	movi	r4,1
    179c:	0001d880 	call	1d88 <close>
  exit (result);
    17a0:	e13fff17 	ldw	r4,-4(fp)
    17a4:	00028040 	call	2804 <exit>

000017a8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    17a8:	defffd04 	addi	sp,sp,-12
    17ac:	dfc00215 	stw	ra,8(sp)
    17b0:	df000115 	stw	fp,4(sp)
    17b4:	df000104 	addi	fp,sp,4
    17b8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    17bc:	e13fff17 	ldw	r4,-4(fp)
    17c0:	0001bf40 	call	1bf4 <alt_busy_sleep>
}
    17c4:	e037883a 	mov	sp,fp
    17c8:	dfc00117 	ldw	ra,4(sp)
    17cc:	df000017 	ldw	fp,0(sp)
    17d0:	dec00204 	addi	sp,sp,8
    17d4:	f800283a 	ret

000017d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    17d8:	defffe04 	addi	sp,sp,-8
    17dc:	dfc00115 	stw	ra,4(sp)
    17e0:	df000015 	stw	fp,0(sp)
    17e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    17e8:	d0a00817 	ldw	r2,-32736(gp)
    17ec:	10000326 	beq	r2,zero,17fc <alt_get_errno+0x24>
    17f0:	d0a00817 	ldw	r2,-32736(gp)
    17f4:	103ee83a 	callr	r2
    17f8:	00000106 	br	1800 <alt_get_errno+0x28>
    17fc:	d0a00b04 	addi	r2,gp,-32724
}
    1800:	e037883a 	mov	sp,fp
    1804:	dfc00117 	ldw	ra,4(sp)
    1808:	df000017 	ldw	fp,0(sp)
    180c:	dec00204 	addi	sp,sp,8
    1810:	f800283a 	ret

00001814 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    1814:	defff904 	addi	sp,sp,-28
    1818:	dfc00615 	stw	ra,24(sp)
    181c:	df000515 	stw	fp,20(sp)
    1820:	df000504 	addi	fp,sp,20
    1824:	e13ffd15 	stw	r4,-12(fp)
    1828:	e17ffe15 	stw	r5,-8(fp)
    182c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    1830:	e0bffd17 	ldw	r2,-12(fp)
    1834:	10000816 	blt	r2,zero,1858 <write+0x44>
    1838:	01400304 	movi	r5,12
    183c:	e13ffd17 	ldw	r4,-12(fp)
    1840:	00012d80 	call	12d8 <__mulsi3>
    1844:	1007883a 	mov	r3,r2
    1848:	00800074 	movhi	r2,1
    184c:	1080a304 	addi	r2,r2,652
    1850:	1885883a 	add	r2,r3,r2
    1854:	00000106 	br	185c <write+0x48>
    1858:	0005883a 	mov	r2,zero
    185c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    1860:	e0bffb17 	ldw	r2,-20(fp)
    1864:	10002126 	beq	r2,zero,18ec <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    1868:	e0bffb17 	ldw	r2,-20(fp)
    186c:	10800217 	ldw	r2,8(r2)
    1870:	108000cc 	andi	r2,r2,3
    1874:	10001826 	beq	r2,zero,18d8 <write+0xc4>
    1878:	e0bffb17 	ldw	r2,-20(fp)
    187c:	10800017 	ldw	r2,0(r2)
    1880:	10800617 	ldw	r2,24(r2)
    1884:	10001426 	beq	r2,zero,18d8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    1888:	e0bffb17 	ldw	r2,-20(fp)
    188c:	10800017 	ldw	r2,0(r2)
    1890:	10800617 	ldw	r2,24(r2)
    1894:	e0ffff17 	ldw	r3,-4(fp)
    1898:	180d883a 	mov	r6,r3
    189c:	e17ffe17 	ldw	r5,-8(fp)
    18a0:	e13ffb17 	ldw	r4,-20(fp)
    18a4:	103ee83a 	callr	r2
    18a8:	e0bffc15 	stw	r2,-16(fp)
    18ac:	e0bffc17 	ldw	r2,-16(fp)
    18b0:	1000070e 	bge	r2,zero,18d0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    18b4:	00017d80 	call	17d8 <alt_get_errno>
    18b8:	1007883a 	mov	r3,r2
    18bc:	e0bffc17 	ldw	r2,-16(fp)
    18c0:	0085c83a 	sub	r2,zero,r2
    18c4:	18800015 	stw	r2,0(r3)
        return -1;
    18c8:	00bfffc4 	movi	r2,-1
    18cc:	00000c06 	br	1900 <write+0xec>
      }
      return rval;
    18d0:	e0bffc17 	ldw	r2,-16(fp)
    18d4:	00000a06 	br	1900 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    18d8:	00017d80 	call	17d8 <alt_get_errno>
    18dc:	1007883a 	mov	r3,r2
    18e0:	00800344 	movi	r2,13
    18e4:	18800015 	stw	r2,0(r3)
    18e8:	00000406 	br	18fc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    18ec:	00017d80 	call	17d8 <alt_get_errno>
    18f0:	1007883a 	mov	r3,r2
    18f4:	00801444 	movi	r2,81
    18f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    18fc:	00bfffc4 	movi	r2,-1
}
    1900:	e037883a 	mov	sp,fp
    1904:	dfc00117 	ldw	ra,4(sp)
    1908:	df000017 	ldw	fp,0(sp)
    190c:	dec00204 	addi	sp,sp,8
    1910:	f800283a 	ret

00001914 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    1914:	defffd04 	addi	sp,sp,-12
    1918:	dfc00215 	stw	ra,8(sp)
    191c:	df000115 	stw	fp,4(sp)
    1920:	df000104 	addi	fp,sp,4
    1924:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    1928:	d1600504 	addi	r5,gp,-32748
    192c:	e13fff17 	ldw	r4,-4(fp)
    1930:	0001ee80 	call	1ee8 <alt_dev_llist_insert>
}
    1934:	e037883a 	mov	sp,fp
    1938:	dfc00117 	ldw	ra,4(sp)
    193c:	df000017 	ldw	fp,0(sp)
    1940:	dec00204 	addi	sp,sp,8
    1944:	f800283a 	ret

00001948 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1948:	defffd04 	addi	sp,sp,-12
    194c:	dfc00215 	stw	ra,8(sp)
    1950:	df000115 	stw	fp,4(sp)
    1954:	df000104 	addi	fp,sp,4
    1958:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    195c:	00024d40 	call	24d4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1960:	00800044 	movi	r2,1
    1964:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1968:	0001883a 	nop
    196c:	e037883a 	mov	sp,fp
    1970:	dfc00117 	ldw	ra,4(sp)
    1974:	df000017 	ldw	fp,0(sp)
    1978:	dec00204 	addi	sp,sp,8
    197c:	f800283a 	ret

00001980 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1980:	defffe04 	addi	sp,sp,-8
    1984:	dfc00115 	stw	ra,4(sp)
    1988:	df000015 	stw	fp,0(sp)
    198c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    1990:	01000074 	movhi	r4,1
    1994:	21008e04 	addi	r4,r4,568
    1998:	00019140 	call	1914 <alt_dev_reg>
}
    199c:	0001883a 	nop
    19a0:	e037883a 	mov	sp,fp
    19a4:	dfc00117 	ldw	ra,4(sp)
    19a8:	df000017 	ldw	fp,0(sp)
    19ac:	dec00204 	addi	sp,sp,8
    19b0:	f800283a 	ret

000019b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    19b4:	defffa04 	addi	sp,sp,-24
    19b8:	dfc00515 	stw	ra,20(sp)
    19bc:	df000415 	stw	fp,16(sp)
    19c0:	df000404 	addi	fp,sp,16
    19c4:	e13ffd15 	stw	r4,-12(fp)
    19c8:	e17ffe15 	stw	r5,-8(fp)
    19cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    19d0:	e0bffd17 	ldw	r2,-12(fp)
    19d4:	10800017 	ldw	r2,0(r2)
    19d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    19dc:	e0bffc17 	ldw	r2,-16(fp)
    19e0:	10c00a04 	addi	r3,r2,40
    19e4:	e0bffd17 	ldw	r2,-12(fp)
    19e8:	10800217 	ldw	r2,8(r2)
    19ec:	100f883a 	mov	r7,r2
    19f0:	e1bfff17 	ldw	r6,-4(fp)
    19f4:	e17ffe17 	ldw	r5,-8(fp)
    19f8:	1809883a 	mov	r4,r3
    19fc:	0001a740 	call	1a74 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    1a00:	e037883a 	mov	sp,fp
    1a04:	dfc00117 	ldw	ra,4(sp)
    1a08:	df000017 	ldw	fp,0(sp)
    1a0c:	dec00204 	addi	sp,sp,8
    1a10:	f800283a 	ret

00001a14 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    1a14:	defffa04 	addi	sp,sp,-24
    1a18:	dfc00515 	stw	ra,20(sp)
    1a1c:	df000415 	stw	fp,16(sp)
    1a20:	df000404 	addi	fp,sp,16
    1a24:	e13ffd15 	stw	r4,-12(fp)
    1a28:	e17ffe15 	stw	r5,-8(fp)
    1a2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1a30:	e0bffd17 	ldw	r2,-12(fp)
    1a34:	10800017 	ldw	r2,0(r2)
    1a38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    1a3c:	e0bffc17 	ldw	r2,-16(fp)
    1a40:	10c00a04 	addi	r3,r2,40
    1a44:	e0bffd17 	ldw	r2,-12(fp)
    1a48:	10800217 	ldw	r2,8(r2)
    1a4c:	100f883a 	mov	r7,r2
    1a50:	e1bfff17 	ldw	r6,-4(fp)
    1a54:	e17ffe17 	ldw	r5,-8(fp)
    1a58:	1809883a 	mov	r4,r3
    1a5c:	0001b600 	call	1b60 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    1a60:	e037883a 	mov	sp,fp
    1a64:	dfc00117 	ldw	ra,4(sp)
    1a68:	df000017 	ldw	fp,0(sp)
    1a6c:	dec00204 	addi	sp,sp,8
    1a70:	f800283a 	ret

00001a74 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    1a74:	defff704 	addi	sp,sp,-36
    1a78:	df000815 	stw	fp,32(sp)
    1a7c:	df000804 	addi	fp,sp,32
    1a80:	e13ffc15 	stw	r4,-16(fp)
    1a84:	e17ffd15 	stw	r5,-12(fp)
    1a88:	e1bffe15 	stw	r6,-8(fp)
    1a8c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    1a90:	e0bffc17 	ldw	r2,-16(fp)
    1a94:	10800017 	ldw	r2,0(r2)
    1a98:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    1a9c:	e0bffd17 	ldw	r2,-12(fp)
    1aa0:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    1aa4:	e0bffe17 	ldw	r2,-8(fp)
    1aa8:	e0fffd17 	ldw	r3,-12(fp)
    1aac:	1885883a 	add	r2,r3,r2
    1ab0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    1ab4:	00001206 	br	1b00 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1ab8:	e0bff917 	ldw	r2,-28(fp)
    1abc:	10800037 	ldwio	r2,0(r2)
    1ac0:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    1ac4:	e0bffb17 	ldw	r2,-20(fp)
    1ac8:	10a0000c 	andi	r2,r2,32768
    1acc:	10000626 	beq	r2,zero,1ae8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1ad0:	e0bff817 	ldw	r2,-32(fp)
    1ad4:	10c00044 	addi	r3,r2,1
    1ad8:	e0fff815 	stw	r3,-32(fp)
    1adc:	e0fffb17 	ldw	r3,-20(fp)
    1ae0:	10c00005 	stb	r3,0(r2)
    1ae4:	00000606 	br	1b00 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    1ae8:	e0fff817 	ldw	r3,-32(fp)
    1aec:	e0bffd17 	ldw	r2,-12(fp)
    1af0:	1880071e 	bne	r3,r2,1b10 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    1af4:	e0bfff17 	ldw	r2,-4(fp)
    1af8:	1090000c 	andi	r2,r2,16384
    1afc:	1000061e 	bne	r2,zero,1b18 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    1b00:	e0fff817 	ldw	r3,-32(fp)
    1b04:	e0bffa17 	ldw	r2,-24(fp)
    1b08:	18bfeb36 	bltu	r3,r2,1ab8 <altera_avalon_jtag_uart_read+0x44>
    1b0c:	00000306 	br	1b1c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    1b10:	0001883a 	nop
    1b14:	00000106 	br	1b1c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    1b18:	0001883a 	nop
    
  }

  if (ptr != buffer)
    1b1c:	e0fff817 	ldw	r3,-32(fp)
    1b20:	e0bffd17 	ldw	r2,-12(fp)
    1b24:	18800426 	beq	r3,r2,1b38 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    1b28:	e0fff817 	ldw	r3,-32(fp)
    1b2c:	e0bffd17 	ldw	r2,-12(fp)
    1b30:	1885c83a 	sub	r2,r3,r2
    1b34:	00000606 	br	1b50 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    1b38:	e0bfff17 	ldw	r2,-4(fp)
    1b3c:	1090000c 	andi	r2,r2,16384
    1b40:	10000226 	beq	r2,zero,1b4c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    1b44:	00bffd44 	movi	r2,-11
    1b48:	00000106 	br	1b50 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    1b4c:	00bffec4 	movi	r2,-5
}
    1b50:	e037883a 	mov	sp,fp
    1b54:	df000017 	ldw	fp,0(sp)
    1b58:	dec00104 	addi	sp,sp,4
    1b5c:	f800283a 	ret

00001b60 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1b60:	defff904 	addi	sp,sp,-28
    1b64:	df000615 	stw	fp,24(sp)
    1b68:	df000604 	addi	fp,sp,24
    1b6c:	e13ffc15 	stw	r4,-16(fp)
    1b70:	e17ffd15 	stw	r5,-12(fp)
    1b74:	e1bffe15 	stw	r6,-8(fp)
    1b78:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    1b7c:	e0bffc17 	ldw	r2,-16(fp)
    1b80:	10800017 	ldw	r2,0(r2)
    1b84:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    1b88:	e0bffe17 	ldw	r2,-8(fp)
    1b8c:	e0fffd17 	ldw	r3,-12(fp)
    1b90:	1885883a 	add	r2,r3,r2
    1b94:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    1b98:	00000e06 	br	1bd4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1b9c:	e0bffa17 	ldw	r2,-24(fp)
    1ba0:	10800104 	addi	r2,r2,4
    1ba4:	10800037 	ldwio	r2,0(r2)
    1ba8:	10bfffec 	andhi	r2,r2,65535
    1bac:	10000926 	beq	r2,zero,1bd4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1bb0:	e0fffa17 	ldw	r3,-24(fp)
    1bb4:	e0bffd17 	ldw	r2,-12(fp)
    1bb8:	11000044 	addi	r4,r2,1
    1bbc:	e13ffd15 	stw	r4,-12(fp)
    1bc0:	10800003 	ldbu	r2,0(r2)
    1bc4:	10803fcc 	andi	r2,r2,255
    1bc8:	1080201c 	xori	r2,r2,128
    1bcc:	10bfe004 	addi	r2,r2,-128
    1bd0:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1bd4:	e0fffd17 	ldw	r3,-12(fp)
    1bd8:	e0bffb17 	ldw	r2,-20(fp)
    1bdc:	18bfef36 	bltu	r3,r2,1b9c <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    1be0:	e0bffe17 	ldw	r2,-8(fp)
}
    1be4:	e037883a 	mov	sp,fp
    1be8:	df000017 	ldw	fp,0(sp)
    1bec:	dec00104 	addi	sp,sp,4
    1bf0:	f800283a 	ret

00001bf4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1bf4:	defffa04 	addi	sp,sp,-24
    1bf8:	dfc00515 	stw	ra,20(sp)
    1bfc:	df000415 	stw	fp,16(sp)
    1c00:	df000404 	addi	fp,sp,16
    1c04:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    1c08:	00800244 	movi	r2,9
    1c0c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    1c10:	014003f4 	movhi	r5,15
    1c14:	29509004 	addi	r5,r5,16960
    1c18:	e13ffd17 	ldw	r4,-12(fp)
    1c1c:	00012d80 	call	12d8 <__mulsi3>
    1c20:	100b883a 	mov	r5,r2
    1c24:	0100bef4 	movhi	r4,763
    1c28:	213c2004 	addi	r4,r4,-3968
    1c2c:	000121c0 	call	121c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1c30:	100b883a 	mov	r5,r2
    1c34:	01200034 	movhi	r4,32768
    1c38:	213fffc4 	addi	r4,r4,-1
    1c3c:	000121c0 	call	121c <__udivsi3>
    1c40:	100b883a 	mov	r5,r2
    1c44:	e13fff17 	ldw	r4,-4(fp)
    1c48:	000121c0 	call	121c <__udivsi3>
    1c4c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1c50:	e0bffe17 	ldw	r2,-8(fp)
    1c54:	10002a26 	beq	r2,zero,1d00 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    1c58:	e03ffc15 	stw	zero,-16(fp)
    1c5c:	00001706 	br	1cbc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1c60:	00a00034 	movhi	r2,32768
    1c64:	10bfffc4 	addi	r2,r2,-1
    1c68:	10bfffc4 	addi	r2,r2,-1
    1c6c:	103ffe1e 	bne	r2,zero,1c68 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    1c70:	014003f4 	movhi	r5,15
    1c74:	29509004 	addi	r5,r5,16960
    1c78:	e13ffd17 	ldw	r4,-12(fp)
    1c7c:	00012d80 	call	12d8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1c80:	100b883a 	mov	r5,r2
    1c84:	0100bef4 	movhi	r4,763
    1c88:	213c2004 	addi	r4,r4,-3968
    1c8c:	000121c0 	call	121c <__udivsi3>
    1c90:	100b883a 	mov	r5,r2
    1c94:	01200034 	movhi	r4,32768
    1c98:	213fffc4 	addi	r4,r4,-1
    1c9c:	000121c0 	call	121c <__udivsi3>
    1ca0:	1007883a 	mov	r3,r2
    1ca4:	e0bfff17 	ldw	r2,-4(fp)
    1ca8:	10c5c83a 	sub	r2,r2,r3
    1cac:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1cb0:	e0bffc17 	ldw	r2,-16(fp)
    1cb4:	10800044 	addi	r2,r2,1
    1cb8:	e0bffc15 	stw	r2,-16(fp)
    1cbc:	e0fffc17 	ldw	r3,-16(fp)
    1cc0:	e0bffe17 	ldw	r2,-8(fp)
    1cc4:	18bfe616 	blt	r3,r2,1c60 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1cc8:	014003f4 	movhi	r5,15
    1ccc:	29509004 	addi	r5,r5,16960
    1cd0:	e13ffd17 	ldw	r4,-12(fp)
    1cd4:	00012d80 	call	12d8 <__mulsi3>
    1cd8:	100b883a 	mov	r5,r2
    1cdc:	0100bef4 	movhi	r4,763
    1ce0:	213c2004 	addi	r4,r4,-3968
    1ce4:	000121c0 	call	121c <__udivsi3>
    1ce8:	e17fff17 	ldw	r5,-4(fp)
    1cec:	1009883a 	mov	r4,r2
    1cf0:	00012d80 	call	12d8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1cf4:	10bfffc4 	addi	r2,r2,-1
    1cf8:	103ffe1e 	bne	r2,zero,1cf4 <alt_busy_sleep+0x100>
    1cfc:	00000d06 	br	1d34 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1d00:	014003f4 	movhi	r5,15
    1d04:	29509004 	addi	r5,r5,16960
    1d08:	e13ffd17 	ldw	r4,-12(fp)
    1d0c:	00012d80 	call	12d8 <__mulsi3>
    1d10:	100b883a 	mov	r5,r2
    1d14:	0100bef4 	movhi	r4,763
    1d18:	213c2004 	addi	r4,r4,-3968
    1d1c:	000121c0 	call	121c <__udivsi3>
    1d20:	e17fff17 	ldw	r5,-4(fp)
    1d24:	1009883a 	mov	r4,r2
    1d28:	00012d80 	call	12d8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1d2c:	10bfffc4 	addi	r2,r2,-1
    1d30:	00bffe16 	blt	zero,r2,1d2c <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    1d34:	0005883a 	mov	r2,zero
}
    1d38:	e037883a 	mov	sp,fp
    1d3c:	dfc00117 	ldw	ra,4(sp)
    1d40:	df000017 	ldw	fp,0(sp)
    1d44:	dec00204 	addi	sp,sp,8
    1d48:	f800283a 	ret

00001d4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1d4c:	defffe04 	addi	sp,sp,-8
    1d50:	dfc00115 	stw	ra,4(sp)
    1d54:	df000015 	stw	fp,0(sp)
    1d58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1d5c:	d0a00817 	ldw	r2,-32736(gp)
    1d60:	10000326 	beq	r2,zero,1d70 <alt_get_errno+0x24>
    1d64:	d0a00817 	ldw	r2,-32736(gp)
    1d68:	103ee83a 	callr	r2
    1d6c:	00000106 	br	1d74 <alt_get_errno+0x28>
    1d70:	d0a00b04 	addi	r2,gp,-32724
}
    1d74:	e037883a 	mov	sp,fp
    1d78:	dfc00117 	ldw	ra,4(sp)
    1d7c:	df000017 	ldw	fp,0(sp)
    1d80:	dec00204 	addi	sp,sp,8
    1d84:	f800283a 	ret

00001d88 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1d88:	defffb04 	addi	sp,sp,-20
    1d8c:	dfc00415 	stw	ra,16(sp)
    1d90:	df000315 	stw	fp,12(sp)
    1d94:	df000304 	addi	fp,sp,12
    1d98:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    1d9c:	e0bfff17 	ldw	r2,-4(fp)
    1da0:	10000816 	blt	r2,zero,1dc4 <close+0x3c>
    1da4:	01400304 	movi	r5,12
    1da8:	e13fff17 	ldw	r4,-4(fp)
    1dac:	00012d80 	call	12d8 <__mulsi3>
    1db0:	1007883a 	mov	r3,r2
    1db4:	00800074 	movhi	r2,1
    1db8:	1080a304 	addi	r2,r2,652
    1dbc:	1885883a 	add	r2,r3,r2
    1dc0:	00000106 	br	1dc8 <close+0x40>
    1dc4:	0005883a 	mov	r2,zero
    1dc8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    1dcc:	e0bffd17 	ldw	r2,-12(fp)
    1dd0:	10001926 	beq	r2,zero,1e38 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    1dd4:	e0bffd17 	ldw	r2,-12(fp)
    1dd8:	10800017 	ldw	r2,0(r2)
    1ddc:	10800417 	ldw	r2,16(r2)
    1de0:	10000626 	beq	r2,zero,1dfc <close+0x74>
    1de4:	e0bffd17 	ldw	r2,-12(fp)
    1de8:	10800017 	ldw	r2,0(r2)
    1dec:	10800417 	ldw	r2,16(r2)
    1df0:	e13ffd17 	ldw	r4,-12(fp)
    1df4:	103ee83a 	callr	r2
    1df8:	00000106 	br	1e00 <close+0x78>
    1dfc:	0005883a 	mov	r2,zero
    1e00:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    1e04:	e13fff17 	ldw	r4,-4(fp)
    1e08:	00024500 	call	2450 <alt_release_fd>
    if (rval < 0)
    1e0c:	e0bffe17 	ldw	r2,-8(fp)
    1e10:	1000070e 	bge	r2,zero,1e30 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    1e14:	0001d4c0 	call	1d4c <alt_get_errno>
    1e18:	1007883a 	mov	r3,r2
    1e1c:	e0bffe17 	ldw	r2,-8(fp)
    1e20:	0085c83a 	sub	r2,zero,r2
    1e24:	18800015 	stw	r2,0(r3)
      return -1;
    1e28:	00bfffc4 	movi	r2,-1
    1e2c:	00000706 	br	1e4c <close+0xc4>
    }
    return 0;
    1e30:	0005883a 	mov	r2,zero
    1e34:	00000506 	br	1e4c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1e38:	0001d4c0 	call	1d4c <alt_get_errno>
    1e3c:	1007883a 	mov	r3,r2
    1e40:	00801444 	movi	r2,81
    1e44:	18800015 	stw	r2,0(r3)
    return -1;
    1e48:	00bfffc4 	movi	r2,-1
  }
}
    1e4c:	e037883a 	mov	sp,fp
    1e50:	dfc00117 	ldw	ra,4(sp)
    1e54:	df000017 	ldw	fp,0(sp)
    1e58:	dec00204 	addi	sp,sp,8
    1e5c:	f800283a 	ret

00001e60 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1e60:	deffff04 	addi	sp,sp,-4
    1e64:	df000015 	stw	fp,0(sp)
    1e68:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1e6c:	0001883a 	nop
    1e70:	e037883a 	mov	sp,fp
    1e74:	df000017 	ldw	fp,0(sp)
    1e78:	dec00104 	addi	sp,sp,4
    1e7c:	f800283a 	ret

00001e80 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1e80:	defffc04 	addi	sp,sp,-16
    1e84:	df000315 	stw	fp,12(sp)
    1e88:	df000304 	addi	fp,sp,12
    1e8c:	e13ffd15 	stw	r4,-12(fp)
    1e90:	e17ffe15 	stw	r5,-8(fp)
    1e94:	e1bfff15 	stw	r6,-4(fp)
  return len;
    1e98:	e0bfff17 	ldw	r2,-4(fp)
}
    1e9c:	e037883a 	mov	sp,fp
    1ea0:	df000017 	ldw	fp,0(sp)
    1ea4:	dec00104 	addi	sp,sp,4
    1ea8:	f800283a 	ret

00001eac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1eac:	defffe04 	addi	sp,sp,-8
    1eb0:	dfc00115 	stw	ra,4(sp)
    1eb4:	df000015 	stw	fp,0(sp)
    1eb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1ebc:	d0a00817 	ldw	r2,-32736(gp)
    1ec0:	10000326 	beq	r2,zero,1ed0 <alt_get_errno+0x24>
    1ec4:	d0a00817 	ldw	r2,-32736(gp)
    1ec8:	103ee83a 	callr	r2
    1ecc:	00000106 	br	1ed4 <alt_get_errno+0x28>
    1ed0:	d0a00b04 	addi	r2,gp,-32724
}
    1ed4:	e037883a 	mov	sp,fp
    1ed8:	dfc00117 	ldw	ra,4(sp)
    1edc:	df000017 	ldw	fp,0(sp)
    1ee0:	dec00204 	addi	sp,sp,8
    1ee4:	f800283a 	ret

00001ee8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1ee8:	defffa04 	addi	sp,sp,-24
    1eec:	dfc00515 	stw	ra,20(sp)
    1ef0:	df000415 	stw	fp,16(sp)
    1ef4:	df000404 	addi	fp,sp,16
    1ef8:	e13ffe15 	stw	r4,-8(fp)
    1efc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1f00:	e0bffe17 	ldw	r2,-8(fp)
    1f04:	10000326 	beq	r2,zero,1f14 <alt_dev_llist_insert+0x2c>
    1f08:	e0bffe17 	ldw	r2,-8(fp)
    1f0c:	10800217 	ldw	r2,8(r2)
    1f10:	1000061e 	bne	r2,zero,1f2c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    1f14:	0001eac0 	call	1eac <alt_get_errno>
    1f18:	1007883a 	mov	r3,r2
    1f1c:	00800584 	movi	r2,22
    1f20:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    1f24:	00bffa84 	movi	r2,-22
    1f28:	00001306 	br	1f78 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    1f2c:	e0bffe17 	ldw	r2,-8(fp)
    1f30:	e0ffff17 	ldw	r3,-4(fp)
    1f34:	e0fffc15 	stw	r3,-16(fp)
    1f38:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1f3c:	e0bffd17 	ldw	r2,-12(fp)
    1f40:	e0fffc17 	ldw	r3,-16(fp)
    1f44:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1f48:	e0bffc17 	ldw	r2,-16(fp)
    1f4c:	10c00017 	ldw	r3,0(r2)
    1f50:	e0bffd17 	ldw	r2,-12(fp)
    1f54:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1f58:	e0bffc17 	ldw	r2,-16(fp)
    1f5c:	10800017 	ldw	r2,0(r2)
    1f60:	e0fffd17 	ldw	r3,-12(fp)
    1f64:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    1f68:	e0bffc17 	ldw	r2,-16(fp)
    1f6c:	e0fffd17 	ldw	r3,-12(fp)
    1f70:	10c00015 	stw	r3,0(r2)

  return 0;  
    1f74:	0005883a 	mov	r2,zero
}
    1f78:	e037883a 	mov	sp,fp
    1f7c:	dfc00117 	ldw	ra,4(sp)
    1f80:	df000017 	ldw	fp,0(sp)
    1f84:	dec00204 	addi	sp,sp,8
    1f88:	f800283a 	ret

00001f8c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    1f8c:	defffd04 	addi	sp,sp,-12
    1f90:	dfc00215 	stw	ra,8(sp)
    1f94:	df000115 	stw	fp,4(sp)
    1f98:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    1f9c:	00800034 	movhi	r2,0
    1fa0:	108adb04 	addi	r2,r2,11116
    1fa4:	e0bfff15 	stw	r2,-4(fp)
    1fa8:	00000606 	br	1fc4 <_do_ctors+0x38>
        (*ctor) (); 
    1fac:	e0bfff17 	ldw	r2,-4(fp)
    1fb0:	10800017 	ldw	r2,0(r2)
    1fb4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    1fb8:	e0bfff17 	ldw	r2,-4(fp)
    1fbc:	10bfff04 	addi	r2,r2,-4
    1fc0:	e0bfff15 	stw	r2,-4(fp)
    1fc4:	e0ffff17 	ldw	r3,-4(fp)
    1fc8:	00800034 	movhi	r2,0
    1fcc:	108adc04 	addi	r2,r2,11120
    1fd0:	18bff62e 	bgeu	r3,r2,1fac <_do_ctors+0x20>
        (*ctor) (); 
}
    1fd4:	0001883a 	nop
    1fd8:	e037883a 	mov	sp,fp
    1fdc:	dfc00117 	ldw	ra,4(sp)
    1fe0:	df000017 	ldw	fp,0(sp)
    1fe4:	dec00204 	addi	sp,sp,8
    1fe8:	f800283a 	ret

00001fec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    1fec:	defffd04 	addi	sp,sp,-12
    1ff0:	dfc00215 	stw	ra,8(sp)
    1ff4:	df000115 	stw	fp,4(sp)
    1ff8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    1ffc:	00800034 	movhi	r2,0
    2000:	108adb04 	addi	r2,r2,11116
    2004:	e0bfff15 	stw	r2,-4(fp)
    2008:	00000606 	br	2024 <_do_dtors+0x38>
        (*dtor) (); 
    200c:	e0bfff17 	ldw	r2,-4(fp)
    2010:	10800017 	ldw	r2,0(r2)
    2014:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2018:	e0bfff17 	ldw	r2,-4(fp)
    201c:	10bfff04 	addi	r2,r2,-4
    2020:	e0bfff15 	stw	r2,-4(fp)
    2024:	e0ffff17 	ldw	r3,-4(fp)
    2028:	00800034 	movhi	r2,0
    202c:	108adc04 	addi	r2,r2,11120
    2030:	18bff62e 	bgeu	r3,r2,200c <_do_dtors+0x20>
        (*dtor) (); 
}
    2034:	0001883a 	nop
    2038:	e037883a 	mov	sp,fp
    203c:	dfc00117 	ldw	ra,4(sp)
    2040:	df000017 	ldw	fp,0(sp)
    2044:	dec00204 	addi	sp,sp,8
    2048:	f800283a 	ret

0000204c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    204c:	deffff04 	addi	sp,sp,-4
    2050:	df000015 	stw	fp,0(sp)
    2054:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    2058:	0001883a 	nop
    205c:	e037883a 	mov	sp,fp
    2060:	df000017 	ldw	fp,0(sp)
    2064:	dec00104 	addi	sp,sp,4
    2068:	f800283a 	ret

0000206c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    206c:	defff804 	addi	sp,sp,-32
    2070:	dfc00715 	stw	ra,28(sp)
    2074:	df000615 	stw	fp,24(sp)
    2078:	dc000515 	stw	r16,20(sp)
    207c:	df000604 	addi	fp,sp,24
    2080:	e13ffb15 	stw	r4,-20(fp)
    2084:	e17ffc15 	stw	r5,-16(fp)
    2088:	e1bffd15 	stw	r6,-12(fp)
    208c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    2090:	e1bffe17 	ldw	r6,-8(fp)
    2094:	e17ffd17 	ldw	r5,-12(fp)
    2098:	e13ffc17 	ldw	r4,-16(fp)
    209c:	00022f40 	call	22f4 <open>
    20a0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    20a4:	e0bffa17 	ldw	r2,-24(fp)
    20a8:	10002216 	blt	r2,zero,2134 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    20ac:	04000074 	movhi	r16,1
    20b0:	8400a304 	addi	r16,r16,652
    20b4:	e0bffa17 	ldw	r2,-24(fp)
    20b8:	01400304 	movi	r5,12
    20bc:	1009883a 	mov	r4,r2
    20c0:	00012d80 	call	12d8 <__mulsi3>
    20c4:	8085883a 	add	r2,r16,r2
    20c8:	10c00017 	ldw	r3,0(r2)
    20cc:	e0bffb17 	ldw	r2,-20(fp)
    20d0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    20d4:	04000074 	movhi	r16,1
    20d8:	8400a304 	addi	r16,r16,652
    20dc:	e0bffa17 	ldw	r2,-24(fp)
    20e0:	01400304 	movi	r5,12
    20e4:	1009883a 	mov	r4,r2
    20e8:	00012d80 	call	12d8 <__mulsi3>
    20ec:	8085883a 	add	r2,r16,r2
    20f0:	10800104 	addi	r2,r2,4
    20f4:	10c00017 	ldw	r3,0(r2)
    20f8:	e0bffb17 	ldw	r2,-20(fp)
    20fc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2100:	04000074 	movhi	r16,1
    2104:	8400a304 	addi	r16,r16,652
    2108:	e0bffa17 	ldw	r2,-24(fp)
    210c:	01400304 	movi	r5,12
    2110:	1009883a 	mov	r4,r2
    2114:	00012d80 	call	12d8 <__mulsi3>
    2118:	8085883a 	add	r2,r16,r2
    211c:	10800204 	addi	r2,r2,8
    2120:	10c00017 	ldw	r3,0(r2)
    2124:	e0bffb17 	ldw	r2,-20(fp)
    2128:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    212c:	e13ffa17 	ldw	r4,-24(fp)
    2130:	00024500 	call	2450 <alt_release_fd>
  }
} 
    2134:	0001883a 	nop
    2138:	e6ffff04 	addi	sp,fp,-4
    213c:	dfc00217 	ldw	ra,8(sp)
    2140:	df000117 	ldw	fp,4(sp)
    2144:	dc000017 	ldw	r16,0(sp)
    2148:	dec00304 	addi	sp,sp,12
    214c:	f800283a 	ret

00002150 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2150:	defffb04 	addi	sp,sp,-20
    2154:	dfc00415 	stw	ra,16(sp)
    2158:	df000315 	stw	fp,12(sp)
    215c:	df000304 	addi	fp,sp,12
    2160:	e13ffd15 	stw	r4,-12(fp)
    2164:	e17ffe15 	stw	r5,-8(fp)
    2168:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    216c:	01c07fc4 	movi	r7,511
    2170:	01800044 	movi	r6,1
    2174:	e17ffd17 	ldw	r5,-12(fp)
    2178:	01000074 	movhi	r4,1
    217c:	2100a604 	addi	r4,r4,664
    2180:	000206c0 	call	206c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2184:	01c07fc4 	movi	r7,511
    2188:	000d883a 	mov	r6,zero
    218c:	e17ffe17 	ldw	r5,-8(fp)
    2190:	01000074 	movhi	r4,1
    2194:	2100a304 	addi	r4,r4,652
    2198:	000206c0 	call	206c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    219c:	01c07fc4 	movi	r7,511
    21a0:	01800044 	movi	r6,1
    21a4:	e17fff17 	ldw	r5,-4(fp)
    21a8:	01000074 	movhi	r4,1
    21ac:	2100a904 	addi	r4,r4,676
    21b0:	000206c0 	call	206c <alt_open_fd>
}  
    21b4:	0001883a 	nop
    21b8:	e037883a 	mov	sp,fp
    21bc:	dfc00117 	ldw	ra,4(sp)
    21c0:	df000017 	ldw	fp,0(sp)
    21c4:	dec00204 	addi	sp,sp,8
    21c8:	f800283a 	ret

000021cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    21cc:	defffe04 	addi	sp,sp,-8
    21d0:	dfc00115 	stw	ra,4(sp)
    21d4:	df000015 	stw	fp,0(sp)
    21d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    21dc:	d0a00817 	ldw	r2,-32736(gp)
    21e0:	10000326 	beq	r2,zero,21f0 <alt_get_errno+0x24>
    21e4:	d0a00817 	ldw	r2,-32736(gp)
    21e8:	103ee83a 	callr	r2
    21ec:	00000106 	br	21f4 <alt_get_errno+0x28>
    21f0:	d0a00b04 	addi	r2,gp,-32724
}
    21f4:	e037883a 	mov	sp,fp
    21f8:	dfc00117 	ldw	ra,4(sp)
    21fc:	df000017 	ldw	fp,0(sp)
    2200:	dec00204 	addi	sp,sp,8
    2204:	f800283a 	ret

00002208 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    2208:	defffb04 	addi	sp,sp,-20
    220c:	dfc00415 	stw	ra,16(sp)
    2210:	df000315 	stw	fp,12(sp)
    2214:	dc000215 	stw	r16,8(sp)
    2218:	df000304 	addi	fp,sp,12
    221c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2220:	e0bffe17 	ldw	r2,-8(fp)
    2224:	10800217 	ldw	r2,8(r2)
    2228:	10d00034 	orhi	r3,r2,16384
    222c:	e0bffe17 	ldw	r2,-8(fp)
    2230:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2234:	e03ffd15 	stw	zero,-12(fp)
    2238:	00002306 	br	22c8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    223c:	04000074 	movhi	r16,1
    2240:	8400a304 	addi	r16,r16,652
    2244:	e0bffd17 	ldw	r2,-12(fp)
    2248:	01400304 	movi	r5,12
    224c:	1009883a 	mov	r4,r2
    2250:	00012d80 	call	12d8 <__mulsi3>
    2254:	8085883a 	add	r2,r16,r2
    2258:	10c00017 	ldw	r3,0(r2)
    225c:	e0bffe17 	ldw	r2,-8(fp)
    2260:	10800017 	ldw	r2,0(r2)
    2264:	1880151e 	bne	r3,r2,22bc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    2268:	04000074 	movhi	r16,1
    226c:	8400a304 	addi	r16,r16,652
    2270:	e0bffd17 	ldw	r2,-12(fp)
    2274:	01400304 	movi	r5,12
    2278:	1009883a 	mov	r4,r2
    227c:	00012d80 	call	12d8 <__mulsi3>
    2280:	8085883a 	add	r2,r16,r2
    2284:	10800204 	addi	r2,r2,8
    2288:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    228c:	10000b0e 	bge	r2,zero,22bc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    2290:	01400304 	movi	r5,12
    2294:	e13ffd17 	ldw	r4,-12(fp)
    2298:	00012d80 	call	12d8 <__mulsi3>
    229c:	1007883a 	mov	r3,r2
    22a0:	00800074 	movhi	r2,1
    22a4:	1080a304 	addi	r2,r2,652
    22a8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    22ac:	e0bffe17 	ldw	r2,-8(fp)
    22b0:	18800226 	beq	r3,r2,22bc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    22b4:	00bffcc4 	movi	r2,-13
    22b8:	00000806 	br	22dc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    22bc:	e0bffd17 	ldw	r2,-12(fp)
    22c0:	10800044 	addi	r2,r2,1
    22c4:	e0bffd15 	stw	r2,-12(fp)
    22c8:	d0a00717 	ldw	r2,-32740(gp)
    22cc:	1007883a 	mov	r3,r2
    22d0:	e0bffd17 	ldw	r2,-12(fp)
    22d4:	18bfd92e 	bgeu	r3,r2,223c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    22d8:	0005883a 	mov	r2,zero
}
    22dc:	e6ffff04 	addi	sp,fp,-4
    22e0:	dfc00217 	ldw	ra,8(sp)
    22e4:	df000117 	ldw	fp,4(sp)
    22e8:	dc000017 	ldw	r16,0(sp)
    22ec:	dec00304 	addi	sp,sp,12
    22f0:	f800283a 	ret

000022f4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    22f4:	defff604 	addi	sp,sp,-40
    22f8:	dfc00915 	stw	ra,36(sp)
    22fc:	df000815 	stw	fp,32(sp)
    2300:	df000804 	addi	fp,sp,32
    2304:	e13ffd15 	stw	r4,-12(fp)
    2308:	e17ffe15 	stw	r5,-8(fp)
    230c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    2310:	00bfffc4 	movi	r2,-1
    2314:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    2318:	00bffb44 	movi	r2,-19
    231c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    2320:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2324:	d1600504 	addi	r5,gp,-32748
    2328:	e13ffd17 	ldw	r4,-12(fp)
    232c:	00024f80 	call	24f8 <alt_find_dev>
    2330:	e0bff815 	stw	r2,-32(fp)
    2334:	e0bff817 	ldw	r2,-32(fp)
    2338:	1000051e 	bne	r2,zero,2350 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    233c:	e13ffd17 	ldw	r4,-12(fp)
    2340:	00025880 	call	2588 <alt_find_file>
    2344:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    2348:	00800044 	movi	r2,1
    234c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2350:	e0bff817 	ldw	r2,-32(fp)
    2354:	10002b26 	beq	r2,zero,2404 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    2358:	e13ff817 	ldw	r4,-32(fp)
    235c:	00026900 	call	2690 <alt_get_fd>
    2360:	e0bff915 	stw	r2,-28(fp)
    2364:	e0bff917 	ldw	r2,-28(fp)
    2368:	1000030e 	bge	r2,zero,2378 <open+0x84>
    {
      status = index;
    236c:	e0bff917 	ldw	r2,-28(fp)
    2370:	e0bffa15 	stw	r2,-24(fp)
    2374:	00002506 	br	240c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    2378:	01400304 	movi	r5,12
    237c:	e13ff917 	ldw	r4,-28(fp)
    2380:	00012d80 	call	12d8 <__mulsi3>
    2384:	1007883a 	mov	r3,r2
    2388:	00800074 	movhi	r2,1
    238c:	1080a304 	addi	r2,r2,652
    2390:	1885883a 	add	r2,r3,r2
    2394:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2398:	e0fffe17 	ldw	r3,-8(fp)
    239c:	00900034 	movhi	r2,16384
    23a0:	10bfffc4 	addi	r2,r2,-1
    23a4:	1886703a 	and	r3,r3,r2
    23a8:	e0bffc17 	ldw	r2,-16(fp)
    23ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    23b0:	e0bffb17 	ldw	r2,-20(fp)
    23b4:	1000051e 	bne	r2,zero,23cc <open+0xd8>
    23b8:	e13ffc17 	ldw	r4,-16(fp)
    23bc:	00022080 	call	2208 <alt_file_locked>
    23c0:	e0bffa15 	stw	r2,-24(fp)
    23c4:	e0bffa17 	ldw	r2,-24(fp)
    23c8:	10001016 	blt	r2,zero,240c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    23cc:	e0bff817 	ldw	r2,-32(fp)
    23d0:	10800317 	ldw	r2,12(r2)
    23d4:	10000826 	beq	r2,zero,23f8 <open+0x104>
    23d8:	e0bff817 	ldw	r2,-32(fp)
    23dc:	10800317 	ldw	r2,12(r2)
    23e0:	e1ffff17 	ldw	r7,-4(fp)
    23e4:	e1bffe17 	ldw	r6,-8(fp)
    23e8:	e17ffd17 	ldw	r5,-12(fp)
    23ec:	e13ffc17 	ldw	r4,-16(fp)
    23f0:	103ee83a 	callr	r2
    23f4:	00000106 	br	23fc <open+0x108>
    23f8:	0005883a 	mov	r2,zero
    23fc:	e0bffa15 	stw	r2,-24(fp)
    2400:	00000206 	br	240c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    2404:	00bffb44 	movi	r2,-19
    2408:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    240c:	e0bffa17 	ldw	r2,-24(fp)
    2410:	1000090e 	bge	r2,zero,2438 <open+0x144>
  {
    alt_release_fd (index);  
    2414:	e13ff917 	ldw	r4,-28(fp)
    2418:	00024500 	call	2450 <alt_release_fd>
    ALT_ERRNO = -status;
    241c:	00021cc0 	call	21cc <alt_get_errno>
    2420:	1007883a 	mov	r3,r2
    2424:	e0bffa17 	ldw	r2,-24(fp)
    2428:	0085c83a 	sub	r2,zero,r2
    242c:	18800015 	stw	r2,0(r3)
    return -1;
    2430:	00bfffc4 	movi	r2,-1
    2434:	00000106 	br	243c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    2438:	e0bff917 	ldw	r2,-28(fp)
}
    243c:	e037883a 	mov	sp,fp
    2440:	dfc00117 	ldw	ra,4(sp)
    2444:	df000017 	ldw	fp,0(sp)
    2448:	dec00204 	addi	sp,sp,8
    244c:	f800283a 	ret

00002450 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    2450:	defffc04 	addi	sp,sp,-16
    2454:	dfc00315 	stw	ra,12(sp)
    2458:	df000215 	stw	fp,8(sp)
    245c:	dc000115 	stw	r16,4(sp)
    2460:	df000204 	addi	fp,sp,8
    2464:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    2468:	e0bffe17 	ldw	r2,-8(fp)
    246c:	108000d0 	cmplti	r2,r2,3
    2470:	1000111e 	bne	r2,zero,24b8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    2474:	04000074 	movhi	r16,1
    2478:	8400a304 	addi	r16,r16,652
    247c:	e0bffe17 	ldw	r2,-8(fp)
    2480:	01400304 	movi	r5,12
    2484:	1009883a 	mov	r4,r2
    2488:	00012d80 	call	12d8 <__mulsi3>
    248c:	8085883a 	add	r2,r16,r2
    2490:	10800204 	addi	r2,r2,8
    2494:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    2498:	04000074 	movhi	r16,1
    249c:	8400a304 	addi	r16,r16,652
    24a0:	e0bffe17 	ldw	r2,-8(fp)
    24a4:	01400304 	movi	r5,12
    24a8:	1009883a 	mov	r4,r2
    24ac:	00012d80 	call	12d8 <__mulsi3>
    24b0:	8085883a 	add	r2,r16,r2
    24b4:	10000015 	stw	zero,0(r2)
  }
}
    24b8:	0001883a 	nop
    24bc:	e6ffff04 	addi	sp,fp,-4
    24c0:	dfc00217 	ldw	ra,8(sp)
    24c4:	df000117 	ldw	fp,4(sp)
    24c8:	dc000017 	ldw	r16,0(sp)
    24cc:	dec00304 	addi	sp,sp,12
    24d0:	f800283a 	ret

000024d4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    24d4:	deffff04 	addi	sp,sp,-4
    24d8:	df000015 	stw	fp,0(sp)
    24dc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    24e0:	000170fa 	wrctl	ienable,zero
}
    24e4:	0001883a 	nop
    24e8:	e037883a 	mov	sp,fp
    24ec:	df000017 	ldw	fp,0(sp)
    24f0:	dec00104 	addi	sp,sp,4
    24f4:	f800283a 	ret

000024f8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    24f8:	defffa04 	addi	sp,sp,-24
    24fc:	dfc00515 	stw	ra,20(sp)
    2500:	df000415 	stw	fp,16(sp)
    2504:	df000404 	addi	fp,sp,16
    2508:	e13ffe15 	stw	r4,-8(fp)
    250c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    2510:	e0bfff17 	ldw	r2,-4(fp)
    2514:	10800017 	ldw	r2,0(r2)
    2518:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    251c:	e13ffe17 	ldw	r4,-8(fp)
    2520:	00013940 	call	1394 <strlen>
    2524:	10800044 	addi	r2,r2,1
    2528:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    252c:	00000d06 	br	2564 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2530:	e0bffc17 	ldw	r2,-16(fp)
    2534:	10800217 	ldw	r2,8(r2)
    2538:	e0fffd17 	ldw	r3,-12(fp)
    253c:	180d883a 	mov	r6,r3
    2540:	e17ffe17 	ldw	r5,-8(fp)
    2544:	1009883a 	mov	r4,r2
    2548:	00028240 	call	2824 <memcmp>
    254c:	1000021e 	bne	r2,zero,2558 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    2550:	e0bffc17 	ldw	r2,-16(fp)
    2554:	00000706 	br	2574 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    2558:	e0bffc17 	ldw	r2,-16(fp)
    255c:	10800017 	ldw	r2,0(r2)
    2560:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2564:	e0fffc17 	ldw	r3,-16(fp)
    2568:	e0bfff17 	ldw	r2,-4(fp)
    256c:	18bff01e 	bne	r3,r2,2530 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    2570:	0005883a 	mov	r2,zero
}
    2574:	e037883a 	mov	sp,fp
    2578:	dfc00117 	ldw	ra,4(sp)
    257c:	df000017 	ldw	fp,0(sp)
    2580:	dec00204 	addi	sp,sp,8
    2584:	f800283a 	ret

00002588 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    2588:	defffb04 	addi	sp,sp,-20
    258c:	dfc00415 	stw	ra,16(sp)
    2590:	df000315 	stw	fp,12(sp)
    2594:	df000304 	addi	fp,sp,12
    2598:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    259c:	d0a00317 	ldw	r2,-32756(gp)
    25a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    25a4:	00003106 	br	266c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    25a8:	e0bffd17 	ldw	r2,-12(fp)
    25ac:	10800217 	ldw	r2,8(r2)
    25b0:	1009883a 	mov	r4,r2
    25b4:	00013940 	call	1394 <strlen>
    25b8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    25bc:	e0bffd17 	ldw	r2,-12(fp)
    25c0:	10c00217 	ldw	r3,8(r2)
    25c4:	e0bffe17 	ldw	r2,-8(fp)
    25c8:	10bfffc4 	addi	r2,r2,-1
    25cc:	1885883a 	add	r2,r3,r2
    25d0:	10800003 	ldbu	r2,0(r2)
    25d4:	10803fcc 	andi	r2,r2,255
    25d8:	1080201c 	xori	r2,r2,128
    25dc:	10bfe004 	addi	r2,r2,-128
    25e0:	10800bd8 	cmpnei	r2,r2,47
    25e4:	1000031e 	bne	r2,zero,25f4 <alt_find_file+0x6c>
    {
      len -= 1;
    25e8:	e0bffe17 	ldw	r2,-8(fp)
    25ec:	10bfffc4 	addi	r2,r2,-1
    25f0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    25f4:	e0bffe17 	ldw	r2,-8(fp)
    25f8:	e0ffff17 	ldw	r3,-4(fp)
    25fc:	1885883a 	add	r2,r3,r2
    2600:	10800003 	ldbu	r2,0(r2)
    2604:	10803fcc 	andi	r2,r2,255
    2608:	1080201c 	xori	r2,r2,128
    260c:	10bfe004 	addi	r2,r2,-128
    2610:	10800be0 	cmpeqi	r2,r2,47
    2614:	1000081e 	bne	r2,zero,2638 <alt_find_file+0xb0>
    2618:	e0bffe17 	ldw	r2,-8(fp)
    261c:	e0ffff17 	ldw	r3,-4(fp)
    2620:	1885883a 	add	r2,r3,r2
    2624:	10800003 	ldbu	r2,0(r2)
    2628:	10803fcc 	andi	r2,r2,255
    262c:	1080201c 	xori	r2,r2,128
    2630:	10bfe004 	addi	r2,r2,-128
    2634:	10000a1e 	bne	r2,zero,2660 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    2638:	e0bffd17 	ldw	r2,-12(fp)
    263c:	10800217 	ldw	r2,8(r2)
    2640:	e0fffe17 	ldw	r3,-8(fp)
    2644:	180d883a 	mov	r6,r3
    2648:	e17fff17 	ldw	r5,-4(fp)
    264c:	1009883a 	mov	r4,r2
    2650:	00028240 	call	2824 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2654:	1000021e 	bne	r2,zero,2660 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    2658:	e0bffd17 	ldw	r2,-12(fp)
    265c:	00000706 	br	267c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    2660:	e0bffd17 	ldw	r2,-12(fp)
    2664:	10800017 	ldw	r2,0(r2)
    2668:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    266c:	e0fffd17 	ldw	r3,-12(fp)
    2670:	d0a00304 	addi	r2,gp,-32756
    2674:	18bfcc1e 	bne	r3,r2,25a8 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    2678:	0005883a 	mov	r2,zero
}
    267c:	e037883a 	mov	sp,fp
    2680:	dfc00117 	ldw	ra,4(sp)
    2684:	df000017 	ldw	fp,0(sp)
    2688:	dec00204 	addi	sp,sp,8
    268c:	f800283a 	ret

00002690 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    2690:	defffa04 	addi	sp,sp,-24
    2694:	dfc00515 	stw	ra,20(sp)
    2698:	df000415 	stw	fp,16(sp)
    269c:	dc000315 	stw	r16,12(sp)
    26a0:	df000404 	addi	fp,sp,16
    26a4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    26a8:	00bffa04 	movi	r2,-24
    26ac:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    26b0:	e03ffc15 	stw	zero,-16(fp)
    26b4:	00001d06 	br	272c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    26b8:	04000074 	movhi	r16,1
    26bc:	8400a304 	addi	r16,r16,652
    26c0:	e0bffc17 	ldw	r2,-16(fp)
    26c4:	01400304 	movi	r5,12
    26c8:	1009883a 	mov	r4,r2
    26cc:	00012d80 	call	12d8 <__mulsi3>
    26d0:	8085883a 	add	r2,r16,r2
    26d4:	10800017 	ldw	r2,0(r2)
    26d8:	1000111e 	bne	r2,zero,2720 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    26dc:	04000074 	movhi	r16,1
    26e0:	8400a304 	addi	r16,r16,652
    26e4:	e0bffc17 	ldw	r2,-16(fp)
    26e8:	01400304 	movi	r5,12
    26ec:	1009883a 	mov	r4,r2
    26f0:	00012d80 	call	12d8 <__mulsi3>
    26f4:	8085883a 	add	r2,r16,r2
    26f8:	e0fffe17 	ldw	r3,-8(fp)
    26fc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    2700:	d0e00717 	ldw	r3,-32740(gp)
    2704:	e0bffc17 	ldw	r2,-16(fp)
    2708:	1880020e 	bge	r3,r2,2714 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    270c:	e0bffc17 	ldw	r2,-16(fp)
    2710:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
    2714:	e0bffc17 	ldw	r2,-16(fp)
    2718:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    271c:	00000606 	br	2738 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2720:	e0bffc17 	ldw	r2,-16(fp)
    2724:	10800044 	addi	r2,r2,1
    2728:	e0bffc15 	stw	r2,-16(fp)
    272c:	e0bffc17 	ldw	r2,-16(fp)
    2730:	10800810 	cmplti	r2,r2,32
    2734:	103fe01e 	bne	r2,zero,26b8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    2738:	e0bffd17 	ldw	r2,-12(fp)
}
    273c:	e6ffff04 	addi	sp,fp,-4
    2740:	dfc00217 	ldw	ra,8(sp)
    2744:	df000117 	ldw	fp,4(sp)
    2748:	dc000017 	ldw	r16,0(sp)
    274c:	dec00304 	addi	sp,sp,12
    2750:	f800283a 	ret

00002754 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    2754:	defffe04 	addi	sp,sp,-8
    2758:	df000115 	stw	fp,4(sp)
    275c:	df000104 	addi	fp,sp,4
    2760:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    2764:	e0bfff17 	ldw	r2,-4(fp)
    2768:	10bffe84 	addi	r2,r2,-6
    276c:	10c00428 	cmpgeui	r3,r2,16
    2770:	18001a1e 	bne	r3,zero,27dc <alt_exception_cause_generated_bad_addr+0x88>
    2774:	100690ba 	slli	r3,r2,2
    2778:	00800034 	movhi	r2,0
    277c:	1089e304 	addi	r2,r2,10124
    2780:	1885883a 	add	r2,r3,r2
    2784:	10800017 	ldw	r2,0(r2)
    2788:	1000683a 	jmp	r2
    278c:	000027cc 	andi	zero,zero,159
    2790:	000027cc 	andi	zero,zero,159
    2794:	000027dc 	xori	zero,zero,159
    2798:	000027dc 	xori	zero,zero,159
    279c:	000027dc 	xori	zero,zero,159
    27a0:	000027cc 	andi	zero,zero,159
    27a4:	000027d4 	movui	zero,159
    27a8:	000027dc 	xori	zero,zero,159
    27ac:	000027cc 	andi	zero,zero,159
    27b0:	000027cc 	andi	zero,zero,159
    27b4:	000027dc 	xori	zero,zero,159
    27b8:	000027cc 	andi	zero,zero,159
    27bc:	000027d4 	movui	zero,159
    27c0:	000027dc 	xori	zero,zero,159
    27c4:	000027dc 	xori	zero,zero,159
    27c8:	000027cc 	andi	zero,zero,159
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    27cc:	00800044 	movi	r2,1
    27d0:	00000306 	br	27e0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    27d4:	0005883a 	mov	r2,zero
    27d8:	00000106 	br	27e0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    27dc:	0005883a 	mov	r2,zero
  }
}
    27e0:	e037883a 	mov	sp,fp
    27e4:	df000017 	ldw	fp,0(sp)
    27e8:	dec00104 	addi	sp,sp,4
    27ec:	f800283a 	ret

000027f0 <atexit>:
    27f0:	200b883a 	mov	r5,r4
    27f4:	000f883a 	mov	r7,zero
    27f8:	000d883a 	mov	r6,zero
    27fc:	0009883a 	mov	r4,zero
    2800:	00028541 	jmpi	2854 <__register_exitproc>

00002804 <exit>:
    2804:	defffe04 	addi	sp,sp,-8
    2808:	000b883a 	mov	r5,zero
    280c:	dc000015 	stw	r16,0(sp)
    2810:	dfc00115 	stw	ra,4(sp)
    2814:	2021883a 	mov	r16,r4
    2818:	00029ac0 	call	29ac <__call_exitprocs>
    281c:	8009883a 	mov	r4,r16
    2820:	0002b3c0 	call	2b3c <_exit>

00002824 <memcmp>:
    2824:	218d883a 	add	r6,r4,r6
    2828:	21800826 	beq	r4,r6,284c <memcmp+0x28>
    282c:	20800003 	ldbu	r2,0(r4)
    2830:	28c00003 	ldbu	r3,0(r5)
    2834:	10c00226 	beq	r2,r3,2840 <memcmp+0x1c>
    2838:	10c5c83a 	sub	r2,r2,r3
    283c:	f800283a 	ret
    2840:	21000044 	addi	r4,r4,1
    2844:	29400044 	addi	r5,r5,1
    2848:	003ff706 	br	2828 <memcmp+0x4>
    284c:	0005883a 	mov	r2,zero
    2850:	f800283a 	ret

00002854 <__register_exitproc>:
    2854:	00800074 	movhi	r2,1
    2858:	10810304 	addi	r2,r2,1036
    285c:	10c00017 	ldw	r3,0(r2)
    2860:	defff904 	addi	sp,sp,-28
    2864:	dc000015 	stw	r16,0(sp)
    2868:	1c000c17 	ldw	r16,48(r3)
    286c:	dd400515 	stw	r21,20(sp)
    2870:	dd000415 	stw	r20,16(sp)
    2874:	dcc00315 	stw	r19,12(sp)
    2878:	dc800215 	stw	r18,8(sp)
    287c:	dc400115 	stw	r17,4(sp)
    2880:	dfc00615 	stw	ra,24(sp)
    2884:	202b883a 	mov	r21,r4
    2888:	2823883a 	mov	r17,r5
    288c:	3027883a 	mov	r19,r6
    2890:	3825883a 	mov	r18,r7
    2894:	1029883a 	mov	r20,r2
    2898:	8000021e 	bne	r16,zero,28a4 <__register_exitproc+0x50>
    289c:	1c000d04 	addi	r16,r3,52
    28a0:	1c000c15 	stw	r16,48(r3)
    28a4:	80800117 	ldw	r2,4(r16)
    28a8:	00c007c4 	movi	r3,31
    28ac:	1880110e 	bge	r3,r2,28f4 <__register_exitproc+0xa0>
    28b0:	00800034 	movhi	r2,0
    28b4:	10800004 	addi	r2,r2,0
    28b8:	1000021e 	bne	r2,zero,28c4 <__register_exitproc+0x70>
    28bc:	00bfffc4 	movi	r2,-1
    28c0:	00003106 	br	2988 <__register_exitproc+0x134>
    28c4:	01002304 	movi	r4,140
    28c8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    28cc:	1021883a 	mov	r16,r2
    28d0:	103ffa26 	beq	r2,zero,28bc <__register_exitproc+0x68>
    28d4:	10000115 	stw	zero,4(r2)
    28d8:	a0800017 	ldw	r2,0(r20)
    28dc:	10c00c17 	ldw	r3,48(r2)
    28e0:	80c00015 	stw	r3,0(r16)
    28e4:	14000c15 	stw	r16,48(r2)
    28e8:	80002215 	stw	zero,136(r16)
    28ec:	a8001d26 	beq	r21,zero,2964 <__register_exitproc+0x110>
    28f0:	00000606 	br	290c <__register_exitproc+0xb8>
    28f4:	a8001b26 	beq	r21,zero,2964 <__register_exitproc+0x110>
    28f8:	80802217 	ldw	r2,136(r16)
    28fc:	1000091e 	bne	r2,zero,2924 <__register_exitproc+0xd0>
    2900:	00800034 	movhi	r2,0
    2904:	10800004 	addi	r2,r2,0
    2908:	103fec26 	beq	r2,zero,28bc <__register_exitproc+0x68>
    290c:	01004204 	movi	r4,264
    2910:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    2914:	103fe926 	beq	r2,zero,28bc <__register_exitproc+0x68>
    2918:	10004015 	stw	zero,256(r2)
    291c:	10004115 	stw	zero,260(r2)
    2920:	80802215 	stw	r2,136(r16)
    2924:	81400117 	ldw	r5,4(r16)
    2928:	01000044 	movi	r4,1
    292c:	2947883a 	add	r3,r5,r5
    2930:	18c7883a 	add	r3,r3,r3
    2934:	10c7883a 	add	r3,r2,r3
    2938:	1cc00015 	stw	r19,0(r3)
    293c:	2148983a 	sll	r4,r4,r5
    2940:	11404017 	ldw	r5,256(r2)
    2944:	290ab03a 	or	r5,r5,r4
    2948:	11404015 	stw	r5,256(r2)
    294c:	1c802015 	stw	r18,128(r3)
    2950:	00c00084 	movi	r3,2
    2954:	a8c0031e 	bne	r21,r3,2964 <__register_exitproc+0x110>
    2958:	10c04117 	ldw	r3,260(r2)
    295c:	1908b03a 	or	r4,r3,r4
    2960:	11004115 	stw	r4,260(r2)
    2964:	80800117 	ldw	r2,4(r16)
    2968:	10c00044 	addi	r3,r2,1
    296c:	10800084 	addi	r2,r2,2
    2970:	1085883a 	add	r2,r2,r2
    2974:	1085883a 	add	r2,r2,r2
    2978:	80c00115 	stw	r3,4(r16)
    297c:	80a1883a 	add	r16,r16,r2
    2980:	84400015 	stw	r17,0(r16)
    2984:	0005883a 	mov	r2,zero
    2988:	dfc00617 	ldw	ra,24(sp)
    298c:	dd400517 	ldw	r21,20(sp)
    2990:	dd000417 	ldw	r20,16(sp)
    2994:	dcc00317 	ldw	r19,12(sp)
    2998:	dc800217 	ldw	r18,8(sp)
    299c:	dc400117 	ldw	r17,4(sp)
    29a0:	dc000017 	ldw	r16,0(sp)
    29a4:	dec00704 	addi	sp,sp,28
    29a8:	f800283a 	ret

000029ac <__call_exitprocs>:
    29ac:	defff504 	addi	sp,sp,-44
    29b0:	dd000515 	stw	r20,20(sp)
    29b4:	05000074 	movhi	r20,1
    29b8:	dc800315 	stw	r18,12(sp)
    29bc:	dfc00a15 	stw	ra,40(sp)
    29c0:	df000915 	stw	fp,36(sp)
    29c4:	ddc00815 	stw	r23,32(sp)
    29c8:	dd800715 	stw	r22,28(sp)
    29cc:	dd400615 	stw	r21,24(sp)
    29d0:	dcc00415 	stw	r19,16(sp)
    29d4:	dc400215 	stw	r17,8(sp)
    29d8:	dc000115 	stw	r16,4(sp)
    29dc:	d9000015 	stw	r4,0(sp)
    29e0:	2825883a 	mov	r18,r5
    29e4:	a5010304 	addi	r20,r20,1036
    29e8:	a4400017 	ldw	r17,0(r20)
    29ec:	8cc00c17 	ldw	r19,48(r17)
    29f0:	8c400c04 	addi	r17,r17,48
    29f4:	98004526 	beq	r19,zero,2b0c <__call_exitprocs+0x160>
    29f8:	9c000117 	ldw	r16,4(r19)
    29fc:	00900034 	movhi	r2,16384
    2a00:	10bfffc4 	addi	r2,r2,-1
    2a04:	9d402217 	ldw	r21,136(r19)
    2a08:	85bfffc4 	addi	r22,r16,-1
    2a0c:	80a1883a 	add	r16,r16,r2
    2a10:	8421883a 	add	r16,r16,r16
    2a14:	8421883a 	add	r16,r16,r16
    2a18:	ac2f883a 	add	r23,r21,r16
    2a1c:	84000204 	addi	r16,r16,8
    2a20:	9c21883a 	add	r16,r19,r16
    2a24:	b0002716 	blt	r22,zero,2ac4 <__call_exitprocs+0x118>
    2a28:	90000726 	beq	r18,zero,2a48 <__call_exitprocs+0x9c>
    2a2c:	a800041e 	bne	r21,zero,2a40 <__call_exitprocs+0x94>
    2a30:	b5bfffc4 	addi	r22,r22,-1
    2a34:	bdffff04 	addi	r23,r23,-4
    2a38:	843fff04 	addi	r16,r16,-4
    2a3c:	003ff906 	br	2a24 <__call_exitprocs+0x78>
    2a40:	b9002017 	ldw	r4,128(r23)
    2a44:	913ffa1e 	bne	r18,r4,2a30 <__call_exitprocs+0x84>
    2a48:	99000117 	ldw	r4,4(r19)
    2a4c:	82000017 	ldw	r8,0(r16)
    2a50:	213fffc4 	addi	r4,r4,-1
    2a54:	b100021e 	bne	r22,r4,2a60 <__call_exitprocs+0xb4>
    2a58:	9d800115 	stw	r22,4(r19)
    2a5c:	00000106 	br	2a64 <__call_exitprocs+0xb8>
    2a60:	80000015 	stw	zero,0(r16)
    2a64:	403ff226 	beq	r8,zero,2a30 <__call_exitprocs+0x84>
    2a68:	9f000117 	ldw	fp,4(r19)
    2a6c:	a8000526 	beq	r21,zero,2a84 <__call_exitprocs+0xd8>
    2a70:	00800044 	movi	r2,1
    2a74:	1592983a 	sll	r9,r2,r22
    2a78:	a9404017 	ldw	r5,256(r21)
    2a7c:	494a703a 	and	r5,r9,r5
    2a80:	2800021e 	bne	r5,zero,2a8c <__call_exitprocs+0xe0>
    2a84:	403ee83a 	callr	r8
    2a88:	00000906 	br	2ab0 <__call_exitprocs+0x104>
    2a8c:	a9004117 	ldw	r4,260(r21)
    2a90:	4908703a 	and	r4,r9,r4
    2a94:	2000041e 	bne	r4,zero,2aa8 <__call_exitprocs+0xfc>
    2a98:	b9400017 	ldw	r5,0(r23)
    2a9c:	d9000017 	ldw	r4,0(sp)
    2aa0:	403ee83a 	callr	r8
    2aa4:	00000206 	br	2ab0 <__call_exitprocs+0x104>
    2aa8:	b9000017 	ldw	r4,0(r23)
    2aac:	403ee83a 	callr	r8
    2ab0:	99000117 	ldw	r4,4(r19)
    2ab4:	e13fcc1e 	bne	fp,r4,29e8 <__call_exitprocs+0x3c>
    2ab8:	89000017 	ldw	r4,0(r17)
    2abc:	993fdc26 	beq	r19,r4,2a30 <__call_exitprocs+0x84>
    2ac0:	003fc906 	br	29e8 <__call_exitprocs+0x3c>
    2ac4:	00800034 	movhi	r2,0
    2ac8:	10800004 	addi	r2,r2,0
    2acc:	10000f26 	beq	r2,zero,2b0c <__call_exitprocs+0x160>
    2ad0:	99400117 	ldw	r5,4(r19)
    2ad4:	99000017 	ldw	r4,0(r19)
    2ad8:	2800091e 	bne	r5,zero,2b00 <__call_exitprocs+0x154>
    2adc:	20000826 	beq	r4,zero,2b00 <__call_exitprocs+0x154>
    2ae0:	89000015 	stw	r4,0(r17)
    2ae4:	a8000226 	beq	r21,zero,2af0 <__call_exitprocs+0x144>
    2ae8:	a809883a 	mov	r4,r21
    2aec:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    2af0:	9809883a 	mov	r4,r19
    2af4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    2af8:	8cc00017 	ldw	r19,0(r17)
    2afc:	003fbd06 	br	29f4 <__call_exitprocs+0x48>
    2b00:	9823883a 	mov	r17,r19
    2b04:	2027883a 	mov	r19,r4
    2b08:	003fba06 	br	29f4 <__call_exitprocs+0x48>
    2b0c:	dfc00a17 	ldw	ra,40(sp)
    2b10:	df000917 	ldw	fp,36(sp)
    2b14:	ddc00817 	ldw	r23,32(sp)
    2b18:	dd800717 	ldw	r22,28(sp)
    2b1c:	dd400617 	ldw	r21,24(sp)
    2b20:	dd000517 	ldw	r20,20(sp)
    2b24:	dcc00417 	ldw	r19,16(sp)
    2b28:	dc800317 	ldw	r18,12(sp)
    2b2c:	dc400217 	ldw	r17,8(sp)
    2b30:	dc000117 	ldw	r16,4(sp)
    2b34:	dec00b04 	addi	sp,sp,44
    2b38:	f800283a 	ret

00002b3c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    2b3c:	defffd04 	addi	sp,sp,-12
    2b40:	df000215 	stw	fp,8(sp)
    2b44:	df000204 	addi	fp,sp,8
    2b48:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    2b4c:	0001883a 	nop
    2b50:	e0bfff17 	ldw	r2,-4(fp)
    2b54:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    2b58:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    2b5c:	10000226 	beq	r2,zero,2b68 <_exit+0x2c>
    ALT_SIM_FAIL();
    2b60:	002af070 	cmpltui	zero,zero,43969
    2b64:	00000106 	br	2b6c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    2b68:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    2b6c:	003fff06 	br	2b6c <_exit+0x30>
